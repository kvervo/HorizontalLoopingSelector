<!--
// (c) Copyright Microsoft Corporation.
// This source is subject to the Microsoft Public License (Ms-PL).
// Please see http://go.microsoft.com/fwlink/?LinkID=131993 for details.
// All other rights reserved.
-->

<UserControl x:Class="System.Windows.Controls.Samples.SeriesZoomSample"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" 
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:visualizationToolkit="clr-namespace:System.Windows.Controls.DataVisualization;assembly=System.Windows.Controls.DataVisualization.Toolkit"             
    xmlns:chartingToolkit="clr-namespace:System.Windows.Controls.DataVisualization.Charting;assembly=System.Windows.Controls.DataVisualization.Toolkit"
    xmlns:chartingPrimitivesToolkit="clr-namespace:System.Windows.Controls.DataVisualization.Charting.Primitives;assembly=System.Windows.Controls.DataVisualization.Toolkit">

    <UserControl.Resources>
        <ControlTemplate TargetType="chartingToolkit:Chart" x:Key="ZoomChartTemplate">
            <Border 
                Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                Padding="5">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="*"/>
                    </Grid.RowDefinitions>

                    <visualizationToolkit:Title
                        Content="{TemplateBinding Title}"
                        Style="{TemplateBinding TitleStyle}"/>

                    <Grid Grid.Row="1">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>

                        <visualizationToolkit:Legend
                            x:Name="Legend"
                            Header="{TemplateBinding LegendTitle}"
                            Style="{TemplateBinding LegendStyle}"
                            Grid.Column="1"/>

                        <ScrollViewer 
                            x:Name="ScrollArea" BorderThickness="0" 
                            HorizontalScrollBarVisibility="Visible" VerticalScrollBarVisibility="Hidden">
                            <chartingPrimitivesToolkit:EdgePanel x:Name="ChartArea" Style="{TemplateBinding ChartAreaStyle}">
                                <Grid Canvas.ZIndex="-1" Style="{TemplateBinding PlotAreaStyle}" />
                                <Border Canvas.ZIndex="1" BorderBrush="#FF919191" BorderThickness="1" />
                            </chartingPrimitivesToolkit:EdgePanel>
                        </ScrollViewer>
                    </Grid>
                </Grid>
            </Border>
        </ControlTemplate>

    </UserControl.Resources>

    <StackPanel Background="White">

        <ContentControl Content="Zooming a Series" Style="{StaticResource Header}"/>

        <chartingToolkit:Chart HorizontalAlignment="Left" Width="450" Height="320" Template="{StaticResource ZoomChartTemplate}" x:Name="ZoomChart" Title="Zoomable">
            <chartingToolkit:LineSeries
                Title="Widget Popularity"
                ItemsSource="{StaticResource WidgetPopularity}"
                IndependentValueBinding="{Binding Date}"
                DependentValueBinding="{Binding Percent}" />
            <chartingToolkit:LineSeries
                Title="Gizmo Popularity"
                ItemsSource="{StaticResource GizmoPopularity}"
                IndependentValueBinding="{Binding Date}"
                DependentValueBinding="{Binding Percent}" />
        </chartingToolkit:Chart>

        <StackPanel Margin="5,10,0,0" Orientation="Horizontal" >
            <TextBlock Text="Zoom:" />
            <Slider Margin="5,0,0,0" Width="250" Minimum="0" Maximum="500" ValueChanged="ZoomChanged" />
        </StackPanel>


        <src:SourceViewer xmlns:src="clr-namespace:System.Windows.Controls.Samples;assembly=System.Windows.Controls.Samples.Common" xmlns:sys="clr-namespace:System;assembly=mscorlib">
  <src:SourceFile Path="SeriesZoomSample.xaml">
    <src:SourceFile.Source>
      <sys:String xml:space="preserve">&lt;!--
// (c) Copyright Microsoft Corporation.
// This source is subject to the Microsoft Public License (Ms-PL).
// Please see http://go.microsoft.com/fwlink/?LinkID=131993 for details.
// All other rights reserved.
--&gt;

&lt;UserControl x:Class="System.Windows.Controls.Samples.SeriesZoomSample"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" 
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:visualizationToolkit="clr-namespace:System.Windows.Controls.DataVisualization;assembly=System.Windows.Controls.DataVisualization.Toolkit"             
    xmlns:chartingToolkit="clr-namespace:System.Windows.Controls.DataVisualization.Charting;assembly=System.Windows.Controls.DataVisualization.Toolkit"
    xmlns:chartingPrimitivesToolkit="clr-namespace:System.Windows.Controls.DataVisualization.Charting.Primitives;assembly=System.Windows.Controls.DataVisualization.Toolkit"&gt;

    &lt;UserControl.Resources&gt;
        &lt;ControlTemplate TargetType="chartingToolkit:Chart" x:Key="ZoomChartTemplate"&gt;
            &lt;Border 
                Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                Padding="5"&gt;
                &lt;Grid&gt;
                    &lt;Grid.RowDefinitions&gt;
                        &lt;RowDefinition Height="Auto"/&gt;
                        &lt;RowDefinition Height="*"/&gt;
                    &lt;/Grid.RowDefinitions&gt;

                    &lt;visualizationToolkit:Title
                        Content="{TemplateBinding Title}"
                        Style="{TemplateBinding TitleStyle}"/&gt;

                    &lt;Grid Grid.Row="1"&gt;
                        &lt;Grid.ColumnDefinitions&gt;
                            &lt;ColumnDefinition Width="*"/&gt;
                            &lt;ColumnDefinition Width="Auto"/&gt;
                        &lt;/Grid.ColumnDefinitions&gt;

                        &lt;visualizationToolkit:Legend
                            x:Name="Legend"
                            Header="{TemplateBinding LegendTitle}"
                            Style="{TemplateBinding LegendStyle}"
                            Grid.Column="1"/&gt;

                        &lt;ScrollViewer 
                            x:Name="ScrollArea" BorderThickness="0" 
                            HorizontalScrollBarVisibility="Visible" VerticalScrollBarVisibility="Hidden"&gt;
                            &lt;chartingPrimitivesToolkit:EdgePanel x:Name="ChartArea" Style="{TemplateBinding ChartAreaStyle}"&gt;
                                &lt;Grid Canvas.ZIndex="-1" Style="{TemplateBinding PlotAreaStyle}" /&gt;
                                &lt;Border Canvas.ZIndex="1" BorderBrush="#FF919191" BorderThickness="1" /&gt;
                            &lt;/chartingPrimitivesToolkit:EdgePanel&gt;
                        &lt;/ScrollViewer&gt;
                    &lt;/Grid&gt;
                &lt;/Grid&gt;
            &lt;/Border&gt;
        &lt;/ControlTemplate&gt;

    &lt;/UserControl.Resources&gt;

    &lt;StackPanel Background="White"&gt;

        &lt;ContentControl Content="Zooming a Series" Style="{StaticResource Header}"/&gt;

        &lt;chartingToolkit:Chart HorizontalAlignment="Left" Width="450" Height="320" Template="{StaticResource ZoomChartTemplate}" x:Name="ZoomChart" Title="Zoomable"&gt;
            &lt;chartingToolkit:LineSeries
                Title="Widget Popularity"
                ItemsSource="{StaticResource WidgetPopularity}"
                IndependentValueBinding="{Binding Date}"
                DependentValueBinding="{Binding Percent}" /&gt;
            &lt;chartingToolkit:LineSeries
                Title="Gizmo Popularity"
                ItemsSource="{StaticResource GizmoPopularity}"
                IndependentValueBinding="{Binding Date}"
                DependentValueBinding="{Binding Percent}" /&gt;
        &lt;/chartingToolkit:Chart&gt;

        &lt;StackPanel Margin="5,10,0,0" Orientation="Horizontal" &gt;
            &lt;TextBlock Text="Zoom:" /&gt;
            &lt;Slider Margin="5,0,0,0" Width="250" Minimum="0" Maximum="500" ValueChanged="ZoomChanged" /&gt;
        &lt;/StackPanel&gt;
    &lt;/StackPanel&gt;
&lt;/UserControl&gt;
</sys:String>
    </src:SourceFile.Source>
  </src:SourceFile>
  <src:SourceFile Path="SeriesZoomSample.xaml.cs">
    <src:SourceFile.Source>
      <sys:String xml:space="preserve">// (c) Copyright Microsoft Corporation.
// This source is subject to the Microsoft Public License (Ms-PL).
// Please see http://go.microsoft.com/fwlink/?LinkID=131993 for details.
// All other rights reserved.

using System;
using System.Collections.Generic;
using System.Windows;
using System.Windows.Controls;
using System.Linq;
using System.Diagnostics;
using System.Windows.Media;
using System.ComponentModel;

namespace System.Windows.Controls.Samples
{
    /// &lt;summary&gt;
    /// Charting sample that demonstrates zooming.
    /// &lt;/summary&gt;
    [Sample("Zoom", DifficultyLevel.Scenario, "DataVisualization")]
    public partial class SeriesZoomSample : UserControl
    {
        /// &lt;summary&gt;
        /// Caching of the ChartArea template part.
        /// &lt;/summary&gt;
        private Panel chartArea;

        /// &lt;summary&gt;
        /// Gets the ChartArea.
        /// &lt;/summary&gt;
        /// &lt;returns&gt;TemplatePart ChartArea&lt;/returns&gt;
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Justification = "Called by ZoomChanged.")]
        private Panel ChartArea
        {
            get
            {
                if (chartArea == null)
                {
                    chartArea = GetLogicalChildrenBreadthFirst(ZoomChart).Where(element =&gt; element.Name.Equals("ChartArea")).FirstOrDefault() as Panel;
                }

                return chartArea;
            }
        }

        /// &lt;summary&gt;
        /// Caching of the ScrollArea template part.
        /// &lt;/summary&gt;
        private ScrollViewer scrollArea;

        /// &lt;summary&gt;
        /// Gets the ScrollArea.
        /// &lt;/summary&gt;
        /// &lt;returns&gt;TemplatePart ScrollArea&lt;/returns&gt;
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Justification = "Called by an event handler in XAML.")]
        private ScrollViewer ScrollArea
        {
            get
            {
                if (scrollArea == null)
                {
                    scrollArea = GetLogicalChildrenBreadthFirst(ZoomChart).Where(element =&gt; element.Name.Equals("ScrollArea")).FirstOrDefault() as ScrollViewer;
                }
                return scrollArea;
            }
        } 

        /// &lt;summary&gt;
        /// Initializes a new instance of the ZoomIntoChartSample class.
        /// &lt;/summary&gt;
        public SeriesZoomSample()
        {
            InitializeComponent();

            this.Loaded += ZoomIntoChartSample_Loaded;
        }

        /// &lt;summary&gt;
        /// Force an update of the chart.
        /// &lt;/summary&gt;
        /// &lt;param name="sender"&gt;The ZoomIntoChartSample instance.&lt;/param&gt;
        /// &lt;param name="e"&gt;Event arguments.&lt;/param&gt;
        private void ZoomIntoChartSample_Loaded(object sender, RoutedEventArgs e)
        {
            // force synchronous layout pass
            ZoomChart.UpdateLayout();

            // and force initial zoom 
            UpdateChart(0);
        }
        
        /// &lt;summary&gt;
        /// Handles the changing of the zoomlevel.
        /// &lt;/summary&gt;
        /// &lt;param name="sender"&gt;The zoom slider.&lt;/param&gt;
        /// &lt;param name="e"&gt;Event arguments.&lt;/param&gt;
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Justification = "Called by an event handler in XAML.")]
        private void ZoomChanged(object sender, RoutedPropertyChangedEventArgs&lt;double&gt; e)
        {
            Debug.Assert(ChartArea != null &amp;&amp; ScrollArea != null, "Zoom should not be called before layout has occurred");

            double zoom = e.NewValue;

            UpdateChart(zoom);
        }

        /// &lt;summary&gt;
        /// Updates the chart to zoom with the correct zoom factor.
        /// &lt;/summary&gt;
        /// &lt;param name="zoom"&gt;The percentage of zoom we wish to apply.&lt;/param&gt;
        private void UpdateChart(double zoom)
        {
            ChartArea.Width = ScrollArea.ViewportWidth + (ScrollArea.ViewportWidth * zoom / 100.0);
        }

        /// &lt;summary&gt;
        /// Helper function that returns a list of the visual children.
        /// &lt;/summary&gt;
        /// &lt;param name="parent"&gt;Element whose visual children will be returned.&lt;/param&gt;
        /// &lt;returns&gt;A collection of visualchildren.&lt;/returns&gt;
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Justification = "Called by ChartArea and ScrollArea.")]
        private IEnumerable&lt;FrameworkElement&gt; GetLogicalChildrenBreadthFirst(FrameworkElement parent)
        {
            Debug.Assert(parent != null, "The parent cannot be null.");

            Queue&lt;FrameworkElement&gt; queue =
                new Queue&lt;FrameworkElement&gt;(GetVisualChildren(parent).OfType&lt;FrameworkElement&gt;());

            while (queue.Count &gt; 0)
            {
                FrameworkElement element = queue.Dequeue();
                yield return element;

                foreach (FrameworkElement visualChild in GetVisualChildren(element).OfType&lt;FrameworkElement&gt;())
                {
                    queue.Enqueue(visualChild);
                }
            }
        }

        /// &lt;summary&gt;
        /// Helper function that returns the direct visual children of an element.
        /// &lt;/summary&gt;
        /// &lt;param name="parent"&gt;The element whose visual children will be returned.&lt;/param&gt;
        /// &lt;returns&gt;A collection of visualchildren.&lt;/returns&gt;
        private IEnumerable&lt;DependencyObject&gt; GetVisualChildren(DependencyObject parent)
        {
            Debug.Assert(parent != null, "The parent cannot be null.");

            int childCount = VisualTreeHelper.GetChildrenCount(parent);
            for (int counter = 0; counter &lt; childCount; counter++)
            {
                yield return VisualTreeHelper.GetChild(parent, counter);
            }
        }
    }
}</sys:String>
    </src:SourceFile.Source>
  </src:SourceFile>
  <src:SourceFile Path="SeriesZoomSample.xaml.vb">
    <src:SourceFile.Source>
      <sys:String xml:space="preserve">' (c) Copyright Microsoft Corporation.
' This source is subject to the Microsoft Public License (Ms-PL).
' Please see http://go.microsoft.com/fwlink/?LinkID=131993 for details.
' All other rights reserved.

Imports Microsoft.VisualBasic
Imports System
Imports System.Collections.Generic
Imports System.Windows
Imports System.Windows.Controls
Imports System.Linq
Imports System.Diagnostics
Imports System.Windows.Media
Imports System.ComponentModel

''' &lt;summary&gt;
''' Charting sample that demonstrates zooming.
''' &lt;/summary&gt;
&lt;Sample("Zoom", DifficultyLevel.Scenario, "DataVisualization")&gt; _
Partial Public Class SeriesZoomSample
    Inherits UserControl
    ''' &lt;summary&gt;
    ''' Caching of the ChartArea template part.
    ''' &lt;/summary&gt;
    Private chartArea_Renamed As Panel

    ''' &lt;summary&gt;
    ''' Gets the ChartArea.
    ''' &lt;/summary&gt;
    ''' &lt;returns&gt;TemplatePart ChartArea&lt;/returns&gt;
    &lt;System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Justification:="Called by ZoomChanged.")&gt; _
    Private ReadOnly Property ChartArea() As Panel
        Get
            If chartArea_Renamed Is Nothing Then
                chartArea_Renamed = TryCast(GetLogicalChildrenBreadthFirst(ZoomChart).Where(Function(element) element.Name.Equals("ChartArea")).FirstOrDefault(), Panel)
            End If

            Return chartArea_Renamed
        End Get
    End Property

    ''' &lt;summary&gt;
    ''' Caching of the ScrollArea template part.
    ''' &lt;/summary&gt;
    Private scrollArea_Renamed As ScrollViewer

    ''' &lt;summary&gt;
    ''' Gets the ScrollArea.
    ''' &lt;/summary&gt;
    ''' &lt;returns&gt;TemplatePart ScrollArea&lt;/returns&gt;
    &lt;System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Justification:="Called by an event handler in XAML.")&gt; _
    Private ReadOnly Property ScrollArea() As ScrollViewer
        Get
            If scrollArea_Renamed Is Nothing Then
                scrollArea_Renamed = TryCast(GetLogicalChildrenBreadthFirst(ZoomChart).Where(Function(element) element.Name.Equals("ScrollArea")).FirstOrDefault(), ScrollViewer)
            End If
            Return scrollArea_Renamed
        End Get
    End Property

    ''' &lt;summary&gt;
    ''' Initializes a new instance of the ZoomIntoChartSample class.
    ''' &lt;/summary&gt;
    Public Sub New()
        InitializeComponent()
    End Sub

    ''' &lt;summary&gt;
    ''' Force an update of the chart.
    ''' &lt;/summary&gt;
    ''' &lt;param name="sender"&gt;The ZoomIntoChartSample instance.&lt;/param&gt;
    ''' &lt;param name="e"&gt;Event arguments.&lt;/param&gt;
    Private Sub ZoomIntoChartSample_Loaded(ByVal sender As Object, ByVal e As RoutedEventArgs) Handles Me.Loaded
        ' force synchronous layout pass
        ZoomChart.UpdateLayout()

        ' and force initial zoom 
        UpdateChart(0)
    End Sub

    ''' &lt;summary&gt;
    ''' Handles the changing of the zoomlevel.
    ''' &lt;/summary&gt;
    ''' &lt;param name="sender"&gt;The zoom slider.&lt;/param&gt;
    ''' &lt;param name="e"&gt;Event arguments.&lt;/param&gt;
    &lt;System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Justification:="Called by an event handler in XAML.")&gt; _
    Private Sub ZoomChanged(ByVal sender As Object, ByVal e As RoutedPropertyChangedEventArgs(Of Double))
        Debug.Assert(ChartArea IsNot Nothing AndAlso ScrollArea IsNot Nothing, "Zoom should not be called before layout has occurred")

        Dim zoom As Double = e.NewValue

        UpdateChart(zoom)
    End Sub

    ''' &lt;summary&gt;
    ''' Updates the chart to zoom with the correct zoom factor.
    ''' &lt;/summary&gt;
    ''' &lt;param name="zoom"&gt;The percentage of zoom we wish to apply.&lt;/param&gt;
    Private Sub UpdateChart(ByVal zoom As Double)
        ChartArea.Width = ScrollArea.ViewportWidth + (ScrollArea.ViewportWidth * zoom / 100.0)
    End Sub

    ''' &lt;summary&gt;
    ''' Helper function that returns a list of the visual children.
    ''' &lt;/summary&gt;
    ''' &lt;param name="parent"&gt;Element whose visual children will be returned.&lt;/param&gt;
    ''' &lt;returns&gt;A collection of visualchildren.&lt;/returns&gt;
    &lt;System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Justification:="Called by ChartArea and ScrollArea.")&gt; _
    Private Shared Function GetLogicalChildrenBreadthFirst(ByVal parent As FrameworkElement) As IEnumerable(Of FrameworkElement)
        Debug.Assert(parent IsNot Nothing, "The parent cannot be null.")

        Dim queue As Queue(Of FrameworkElement) = New Queue(Of FrameworkElement)(GetVisualChildren(parent).OfType(Of FrameworkElement)())
        Dim list As New List(Of FrameworkElement)()
        Do While queue.Count &gt; 0
            Dim element As FrameworkElement = queue.Dequeue()
            list.Add(element)

            For Each visualChild As FrameworkElement In GetVisualChildren(element).OfType(Of FrameworkElement)()
                queue.Enqueue(visualChild)
            Next visualChild
        Loop
        Return list
    End Function

    ''' &lt;summary&gt;
    ''' Helper function that returns the direct visual children of an element.
    ''' &lt;/summary&gt;
    ''' &lt;param name="parent"&gt;The element whose visual children will be returned.&lt;/param&gt;
    ''' &lt;returns&gt;A collection of visualchildren.&lt;/returns&gt;
    Private Shared Function GetVisualChildren(ByVal parent As DependencyObject) As IEnumerable(Of DependencyObject)
        Debug.Assert(parent IsNot Nothing, "The parent cannot be null.")

        Dim childCount As Integer = VisualTreeHelper.GetChildrenCount(parent)
        Dim list As New List(Of DependencyObject)()
        For counter As Integer = 0 To childCount - 1
            list.Add(VisualTreeHelper.GetChild(parent, counter))
        Next counter
        Return list
    End Function
End Class
</sys:String>
    </src:SourceFile.Source>
  </src:SourceFile>
</src:SourceViewer>
    </StackPanel>
</UserControl>
