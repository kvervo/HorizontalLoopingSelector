<!--
// (c) Copyright Microsoft Corporation.
// This source is subject to the Microsoft Public License (Ms-PL).
// Please see http://go.microsoft.com/fwlink/?LinkID=131993 for details.
// All other rights reserved.
-->

<UserControl x:Class="System.Windows.Controls.Samples.SearchSuggestionSample"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" 
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:system="clr-namespace:System;assembly=mscorlib"
    xmlns:samplesCommon="clr-namespace:System.Windows.Controls.Samples;assembly=System.Windows.Controls.Samples.Common"
    xmlns:input="clr-namespace:System.Windows.Controls;assembly=System.Windows.Controls.Input">

    <UserControl.Resources>
        <Style x:Key="SearchTextBoxStyle" TargetType="TextBox">
            <Setter Property="Background" Value="#AAFFFFFF" />
            <Setter Property="FontFamily" Value="Verdana" />
            <Setter Property="FontSize" Value="18" />
            <Setter Property="Padding" Value="2" />
        </Style>
    </UserControl.Resources>
    
    <StackPanel>
        <ContentControl Content="Bing Search Suggestions" Style="{StaticResource Header}" />

        <!-- AutoCompleteBox example -->
        <Grid Width="650" Height="406" Background="{StaticResource SearchSuggestionsImageBrush}">
            <StackPanel Width="490" Orientation="Horizontal" VerticalAlignment="Top" Margin="10,119,10,0">

                <Image Source="Bing.png" Stretch="None" />

                <Grid Width="300" Height="34" Margin="8,0,0,0">

                    <input:AutoCompleteBox 
                        FilterMode="None"
                        x:Name="Search" 
                        TextBoxStyle="{StaticResource SearchTextBoxStyle}"
                        IsEnabled="False" />
                    <Button x:Name="Go" Cursor="Hand" IsEnabled="False" Width="32" Height="32" HorizontalAlignment="Right" BorderThickness="0,0,0,0" RenderTransformOrigin="0.5,0.5">
                        <Button.RenderTransform>
                            <TransformGroup>
                                <ScaleTransform ScaleX="0.85" ScaleY="0.85"/>
                                <SkewTransform/>
                                <RotateTransform/>
                                <TranslateTransform/>
                            </TransformGroup>
                        </Button.RenderTransform>
                        <Button.Template>
                            <ControlTemplate TargetType="Button">
                                <Grid Margin="0" x:Name="RootElement">
                                    <Rectangle Margin="0" Stroke="#FF000000" StrokeThickness="0" RadiusX="2.5" RadiusY="2.5">
                                        <Rectangle.Fill>
                                            <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                                <GradientStop Color="#FFFCAA24" Offset="0" />
                                                <GradientStop Color="#FFFF860A" Offset="1" />
                                            </LinearGradientBrush>
                                        </Rectangle.Fill>
                                    </Rectangle>
                                    <Ellipse Height="16.105" Margin="0,6.438,5,0" VerticalAlignment="Top" Stroke="#FFFFFFFF" StrokeThickness="2" Width="15.938" HorizontalAlignment="Right"/>
                                    <Path Height="7.875" HorizontalAlignment="Left" Margin="7.754,0,0,6.467" VerticalAlignment="Bottom" Width="7.75" Fill="#FFFFFFFF" Stretch="Fill" Stroke="#FFFFFFFF" StrokeThickness="2" Data="M14.097251,19.182762 L8.7665224,24.552877"/>
                                </Grid>
                            </ControlTemplate>
                        </Button.Template>
                    </Button>
                </Grid>
            </StackPanel>


            <!-- Hosting warning message -->
            <StackPanel x:Name="HostingWarning" Background="#88000000">
                <StackPanel Background="#aaffffff" Margin="6">
                    <TextBlock Margin="6" UseLayoutRounding="False" FontWeight="Bold">This sample must be hosted on a web server.</TextBlock>
                    <TextBlock Margin="6" UseLayoutRounding="False" TextWrapping="Wrap">A cross-domain web service call can only be made when the page is hosted from a server via the HTTP scheme. Consider hosting this using IIS, the built-in Web Development Server in Visual Studio, or another server technology. At this time, this sample is also not supported in Out of Browser scenarios.</TextBlock>
                </StackPanel>
            </StackPanel>

        </Grid>

        <src:SourceViewer xmlns:src="clr-namespace:System.Windows.Controls.Samples;assembly=System.Windows.Controls.Samples.Common" xmlns:sys="clr-namespace:System;assembly=mscorlib">
  <src:SourceFile Path="SearchSuggestionSample.xaml">
    <src:SourceFile.Source>
      <sys:String xml:space="preserve">&lt;!--
// (c) Copyright Microsoft Corporation.
// This source is subject to the Microsoft Public License (Ms-PL).
// Please see http://go.microsoft.com/fwlink/?LinkID=131993 for details.
// All other rights reserved.
--&gt;

&lt;UserControl x:Class="System.Windows.Controls.Samples.SearchSuggestionSample"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" 
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:system="clr-namespace:System;assembly=mscorlib"
    xmlns:samplesCommon="clr-namespace:System.Windows.Controls.Samples;assembly=System.Windows.Controls.Samples.Common"
    xmlns:input="clr-namespace:System.Windows.Controls;assembly=System.Windows.Controls.Input"&gt;

    &lt;UserControl.Resources&gt;
        &lt;Style x:Key="SearchTextBoxStyle" TargetType="TextBox"&gt;
            &lt;Setter Property="Background" Value="#AAFFFFFF" /&gt;
            &lt;Setter Property="FontFamily" Value="Verdana" /&gt;
            &lt;Setter Property="FontSize" Value="18" /&gt;
            &lt;Setter Property="Padding" Value="2" /&gt;
        &lt;/Style&gt;
    &lt;/UserControl.Resources&gt;
    
    &lt;StackPanel&gt;
        &lt;ContentControl Content="Bing Search Suggestions" Style="{StaticResource Header}" /&gt;

        &lt;!-- AutoCompleteBox example --&gt;
        &lt;Grid Width="650" Height="406" Background="{StaticResource SearchSuggestionsImageBrush}"&gt;
            &lt;StackPanel Width="490" Orientation="Horizontal" VerticalAlignment="Top" Margin="10,119,10,0"&gt;

                &lt;Image Source="Bing.png" Stretch="None" /&gt;

                &lt;Grid Width="300" Height="34" Margin="8,0,0,0"&gt;

                    &lt;input:AutoCompleteBox 
                        FilterMode="None"
                        x:Name="Search" 
                        TextBoxStyle="{StaticResource SearchTextBoxStyle}"
                        IsEnabled="False" /&gt;
                    &lt;Button x:Name="Go" Cursor="Hand" IsEnabled="False" Width="32" Height="32" HorizontalAlignment="Right" BorderThickness="0,0,0,0" RenderTransformOrigin="0.5,0.5"&gt;
                        &lt;Button.RenderTransform&gt;
                            &lt;TransformGroup&gt;
                                &lt;ScaleTransform ScaleX="0.85" ScaleY="0.85"/&gt;
                                &lt;SkewTransform/&gt;
                                &lt;RotateTransform/&gt;
                                &lt;TranslateTransform/&gt;
                            &lt;/TransformGroup&gt;
                        &lt;/Button.RenderTransform&gt;
                        &lt;Button.Template&gt;
                            &lt;ControlTemplate TargetType="Button"&gt;
                                &lt;Grid Margin="0" x:Name="RootElement"&gt;
                                    &lt;Rectangle Margin="0" Stroke="#FF000000" StrokeThickness="0" RadiusX="2.5" RadiusY="2.5"&gt;
                                        &lt;Rectangle.Fill&gt;
                                            &lt;LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0"&gt;
                                                &lt;GradientStop Color="#FFFCAA24" Offset="0" /&gt;
                                                &lt;GradientStop Color="#FFFF860A" Offset="1" /&gt;
                                            &lt;/LinearGradientBrush&gt;
                                        &lt;/Rectangle.Fill&gt;
                                    &lt;/Rectangle&gt;
                                    &lt;Ellipse Height="16.105" Margin="0,6.438,5,0" VerticalAlignment="Top" Stroke="#FFFFFFFF" StrokeThickness="2" Width="15.938" HorizontalAlignment="Right"/&gt;
                                    &lt;Path Height="7.875" HorizontalAlignment="Left" Margin="7.754,0,0,6.467" VerticalAlignment="Bottom" Width="7.75" Fill="#FFFFFFFF" Stretch="Fill" Stroke="#FFFFFFFF" StrokeThickness="2" Data="M14.097251,19.182762 L8.7665224,24.552877"/&gt;
                                &lt;/Grid&gt;
                            &lt;/ControlTemplate&gt;
                        &lt;/Button.Template&gt;
                    &lt;/Button&gt;
                &lt;/Grid&gt;
            &lt;/StackPanel&gt;


            &lt;!-- Hosting warning message --&gt;
            &lt;StackPanel x:Name="HostingWarning" Background="#88000000"&gt;
                &lt;StackPanel Background="#aaffffff" Margin="6"&gt;
                    &lt;TextBlock Margin="6" UseLayoutRounding="False" FontWeight="Bold"&gt;This sample must be hosted on a web server.&lt;/TextBlock&gt;
                    &lt;TextBlock Margin="6" UseLayoutRounding="False" TextWrapping="Wrap"&gt;A cross-domain web service call can only be made when the page is hosted from a server via the HTTP scheme. Consider hosting this using IIS, the built-in Web Development Server in Visual Studio, or another server technology. At this time, this sample is also not supported in Out of Browser scenarios.&lt;/TextBlock&gt;
                &lt;/StackPanel&gt;
            &lt;/StackPanel&gt;

        &lt;/Grid&gt;

    &lt;/StackPanel&gt;
&lt;/UserControl&gt;</sys:String>
    </src:SourceFile.Source>
  </src:SourceFile>
  <src:SourceFile Path="SearchSuggestionSample.xaml.cs">
    <src:SourceFile.Source>
      <sys:String xml:space="preserve">// (c) Copyright Microsoft Corporation.
// This source is subject to the Microsoft Public License (Ms-PL).
// Please see http://go.microsoft.com/fwlink/?LinkID=131993 for details.
// All other rights reserved.

using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.Json;
using System.Linq;
using System.Net;
using System.Windows;
using System.Windows.Browser;
using System.Windows.Controls;
using System.ComponentModel;

namespace System.Windows.Controls.Samples
{
    /// &lt;summary&gt;
    /// A simple auto complete search suggestions sample that connects to a 
    /// real web service.
    /// &lt;/summary&gt;
    [Sample("Search Suggestions", DifficultyLevel.Scenario, "AutoCompleteBox")]
    public partial class SearchSuggestionSample : UserControl
    {
        /// &lt;summary&gt;
        /// Initializes a new instance of the SearchSuggestionSample class.
        /// &lt;/summary&gt;
        public SearchSuggestionSample()
        {
            InitializeComponent();
            Loaded += OnLoaded;
        }

        /// &lt;summary&gt;
        /// Handles the Loaded event by initializing the control for live web 
        /// service use if the stack is available.
        /// &lt;/summary&gt;
        /// &lt;param name="sender"&gt;The source object.&lt;/param&gt;
        /// &lt;param name="e"&gt;The event data.&lt;/param&gt;
        private void OnLoaded(object sender, RoutedEventArgs e)
        {
            if (WebServiceHelper.CanMakeHttpRequests)
            {
                HostingWarning.Visibility = Visibility.Collapsed;
                Go.IsEnabled = true;
                Search.IsEnabled = true;

                Search.Populating += Search_Populating;
                Action go = () =&gt; HtmlPage.Window.Navigate(WebServiceHelper.CreateWebSearchUri(Search.Text), "_blank");
                Search.KeyUp += (s, args) =&gt;
                    {
                        if (args.Key == System.Windows.Input.Key.Enter)
                        {
                            go();
                        }
                    };
                Go.Click += (s, args) =&gt; go();
            }
        }

        /// &lt;summary&gt;
        /// Handle and cancel the Populating event, and kick off the web service
        /// request.
        /// &lt;/summary&gt;
        /// &lt;param name="sender"&gt;The source object.&lt;/param&gt;
        /// &lt;param name="e"&gt;The event data.&lt;/param&gt;
        private void Search_Populating(object sender, PopulatingEventArgs e)
        {
            AutoCompleteBox autoComplete = (AutoCompleteBox)sender;

            // Allow us to wait for the response
            e.Cancel = true;

            // Create a request for suggestion
            WebClient wc = new WebClient();
            wc.DownloadStringCompleted += OnDownloadStringCompleted;
            wc.DownloadStringAsync(WebServiceHelper.CreateWebSearchSuggestionsUri(autoComplete.SearchText), autoComplete);
        }

        /// &lt;summary&gt;
        /// Handle the string download completed event of WebClient.
        /// &lt;/summary&gt;
        /// &lt;param name="sender"&gt;The source object.&lt;/param&gt;
        /// &lt;param name="e"&gt;The event data.&lt;/param&gt;
        [SuppressMessage("Microsoft.Design", "CA1031:DoNotCatchGeneralExceptionTypes", Justification = "Any failure in the Json or request parsing should not be surfaced.")]
        private void OnDownloadStringCompleted(object sender, DownloadStringCompletedEventArgs e)
        {
            AutoCompleteBox autoComplete = e.UserState as AutoCompleteBox;
            if (autoComplete != null &amp;&amp; e.Error == null &amp;&amp; !e.Cancelled &amp;&amp; !string.IsNullOrEmpty(e.Result))
            {
                List&lt;string&gt; data = new List&lt;string&gt;();
                try
                {
                    JsonArray result = (JsonArray)JsonArray.Parse(e.Result);
                    if (result.Count &gt; 1)
                    {
                        string originalSearchString = result[0];
                        if (originalSearchString == autoComplete.SearchText)
                        {
                            JsonArray suggestions = (JsonArray)result[1];
                            foreach (JsonPrimitive suggestion in suggestions)
                            {
                                data.Add(suggestion);
                            }

                            // Diplay the AutoCompleteBox drop down with any suggestions
                            autoComplete.ItemsSource = data;
                            autoComplete.PopulateComplete();
                        }
                    }
                }
                catch
                {
                }
            }
        }
    }
}</sys:String>
    </src:SourceFile.Source>
  </src:SourceFile>
  <src:SourceFile Path="SearchSuggestionSample.xaml.vb">
    <src:SourceFile.Source>
      <sys:String xml:space="preserve">' (c) Copyright Microsoft Corporation.
' This source is subject to the Microsoft Public License (Ms-PL).
' Please see http://go.microsoft.com/fwlink/?LinkID=131993 for details.
' All other rights reserved.

Imports Microsoft.VisualBasic
Imports System
Imports System.Collections.Generic
Imports System.Diagnostics.CodeAnalysis
Imports System.Json
Imports System.Linq
Imports System.Net
Imports System.Windows
Imports System.Windows.Browser
Imports System.Windows.Controls
Imports System.ComponentModel

''' &lt;summary&gt;
''' A simple auto complete search suggestions sample that connects to a 
''' real web service.
''' &lt;/summary&gt;
&lt;Sample("Search Suggestions", DifficultyLevel.Scenario, "AutoCompleteBox")&gt; _
Partial Public Class SearchSuggestionSample
    Inherits UserControl
    ''' &lt;summary&gt;
    ''' Initializes a new instance of the SearchSuggestionSample class.
    ''' &lt;/summary&gt;
    Public Sub New()
        InitializeComponent()
    End Sub

    ''' &lt;summary&gt;
    ''' Handles the Loaded event by initializing the control for live web 
    ''' service use if the stack is available.
    ''' &lt;/summary&gt;
    ''' &lt;param name="sender"&gt;The source object.&lt;/param&gt;
    ''' &lt;param name="e"&gt;The event data.&lt;/param&gt;
    Private Sub OnLoaded(ByVal sender As Object, ByVal e As RoutedEventArgs) Handles Me.Loaded
        If WebServiceHelper.CanMakeHttpRequests Then
            HostingWarning.Visibility = Visibility.Collapsed
            Go.IsEnabled = True
            Search.IsEnabled = True
        End If
    End Sub

    ''' &lt;summary&gt;
    ''' Handle and cancel the Populating event, and kick off the web service
    ''' request.
    ''' &lt;/summary&gt;
    ''' &lt;param name="sender"&gt;The source object.&lt;/param&gt;
    ''' &lt;param name="e"&gt;The event data.&lt;/param&gt;
    Private Sub Search_Populating(ByVal sender As Object, ByVal e As PopulatingEventArgs) Handles Search.Populating
        Dim autoComplete As AutoCompleteBox = CType(sender, AutoCompleteBox)

        ' Allow us to wait for the response
        e.Cancel = True

        ' Create a request for suggestion
        Dim wc As New WebClient()
        AddHandler wc.DownloadStringCompleted, AddressOf OnDownloadStringCompleted
        wc.DownloadStringAsync(WebServiceHelper.CreateWebSearchSuggestionsUri(autoComplete.SearchText), autoComplete)
    End Sub

    ''' &lt;summary&gt;
    ''' Handle the AutoCompleteBox KeyUp event, and kick off the web service
    ''' request when the Enter key is pressed.
    ''' &lt;/summary&gt;
    ''' &lt;param name="sender"&gt;The source object.&lt;/param&gt;
    ''' &lt;param name="e"&gt;The event data.&lt;/param&gt;
    Private Sub Search_KeyUp(ByVal sender As Object, ByVal e As Input.KeyEventArgs) Handles Search.KeyUp
        If e.Key = System.Windows.Input.Key.Enter Then
            CallWebServiceWithSearchString(Search.Text)
        End If
    End Sub

    ''' &lt;summary&gt;
    ''' Handle the Go button Click event, and kick off the web service
    ''' request.
    ''' &lt;/summary&gt;
    ''' &lt;param name="sender"&gt;The source object.&lt;/param&gt;
    ''' &lt;param name="e"&gt;The event data.&lt;/param&gt;
    Private Sub Go_Click(ByVal sender As Object, ByVal e As RoutedEventArgs) Handles Go.Click
        CallWebServiceWithSearchString(Search.Text)
    End Sub

    ''' &lt;summary&gt;
    ''' Kick off the web service request.
    ''' &lt;/summary&gt;
    ''' &lt;param name="searchText"&gt;The search text.&lt;/param&gt;
    Private Shared Sub CallWebServiceWithSearchString(ByRef searchText As String)
        HtmlPage.Window.Navigate(WebServiceHelper.CreateWebSearchUri(searchText), "_blank")
    End Sub

    ''' &lt;summary&gt;
    ''' Handle the string download completed event of WebClient.
    ''' &lt;/summary&gt;
    ''' &lt;param name="sender"&gt;The source object.&lt;/param&gt;
    ''' &lt;param name="e"&gt;The event data.&lt;/param&gt;
    &lt;SuppressMessage("Microsoft.Design", "CA1031:DoNotCatchGeneralExceptionTypes", Justification:="Any failure in the Json or request parsing should not be surfaced.")&gt; _
    Private Sub OnDownloadStringCompleted(ByVal sender As Object, ByVal e As DownloadStringCompletedEventArgs)
        Dim autoComplete As AutoCompleteBox = TryCast(e.UserState, AutoCompleteBox)
        If autoComplete IsNot Nothing AndAlso e.Error Is Nothing AndAlso (Not e.Cancelled) AndAlso (Not String.IsNullOrEmpty(e.Result)) Then
            Dim data As List(Of String) = New List(Of String)()
            Try
                Dim result As JsonArray = TryCast((CType(JsonArray.Parse(e.Result), JsonArray)), JsonArray)
                If result.Count &gt; 1 Then
                    Dim originalSearchString As String = result(0)
                    If originalSearchString = autoComplete.SearchText Then
                        For Each suggestion As JsonPrimitive In CType(result(1), JsonArray)
                            data.Add(suggestion)
                        Next suggestion

                        ' Diplay the AutoCompleteBox drop down with any suggestions
                        autoComplete.ItemsSource = data
                        autoComplete.PopulateComplete()
                    End If
                End If
            Catch
            End Try
        End If
    End Sub
End Class
</sys:String>
    </src:SourceFile.Source>
  </src:SourceFile>
  <src:SourceFile Path="../../Controls.Samples.Common/WebServiceHelper.cs">
    <src:SourceFile.Source>
      <sys:String xml:space="preserve">// (c) Copyright Microsoft Corporation.
// This source is subject to the Microsoft Public License (Ms-PL).
// Please see http://go.microsoft.com/fwlink/?LinkID=131993 for details.
// All other rights reserved.

using System.Globalization;
using System.Windows.Browser;

namespace System.Windows.Controls.Samples
{
    /// &lt;summary&gt;
    /// A set of simple helpers to enable the creation of more robust web 
    /// service samples. Includes a centralized place to get generic addresses 
    /// for service requests and web pages.
    /// &lt;/summary&gt;
    public static class WebServiceHelper
    {
        /// &lt;summary&gt;
        /// The format of the URI for JSON requests to Bing Suggestions.
        /// &lt;/summary&gt;
        private const string SearchSuggestionsJsonUriFormat = "http://api.bing.net/osjson.aspx?query={0}";

        /// &lt;summary&gt;
        /// Standard Bing Search address.
        /// &lt;/summary&gt;
        private const string WebSearchUriFormat = "http://www.bing.com/search?q={0}";

        /// &lt;summary&gt;
        /// A format string for creating a link to look at airline fares online.
        /// &lt;/summary&gt;
        private const string AirfareSearchUriFormat = "http://www.bing.com/travel/flight/flightSearch?t=r&amp;o={0}&amp;e={1}&amp;d1={2}&amp;r1={3}&amp;p={4}&amp;b=COACH"; 

        /// &lt;summary&gt;
        /// Gets a value indicating whether the document scheme allows for web 
        /// service access.
        /// &lt;/summary&gt;
        /// &lt;returns&gt;Returns true when the scheme should permit web requests.&lt;/returns&gt;
        public static bool CanMakeHttpRequests
        {
            get
            {
                if (!HtmlPage.IsEnabled)
                {
                    return false;
                }

                string scheme = HtmlPage.Document.DocumentUri.Scheme ?? string.Empty;
                return string.Compare(scheme, "http", StringComparison.OrdinalIgnoreCase) == 0;
            }
        }

        /// &lt;summary&gt;
        /// Creates a Uri to navigate to a web search service.
        /// &lt;/summary&gt;
        /// &lt;param name="searchText"&gt;The search string.&lt;/param&gt;
        /// &lt;returns&gt;Returns a new Uri instance.&lt;/returns&gt;
        public static Uri CreateWebSearchUri(string searchText)
        {
            return new Uri(string.Format(CultureInfo.InvariantCulture, WebSearchUriFormat, HttpUtility.UrlEncode(searchText)));
        }

        /// &lt;summary&gt;
        /// Creates a Uri for retrieving search suggestion phrases.
        /// &lt;/summary&gt;
        /// &lt;param name="searchText"&gt;The search string.&lt;/param&gt;
        /// &lt;returns&gt;Returns a new Uri instance.&lt;/returns&gt;
        public static Uri CreateWebSearchSuggestionsUri(string searchText)
        {
            return new Uri(string.Format(CultureInfo.InvariantCulture, SearchSuggestionsJsonUriFormat, HttpUtility.UrlEncode(searchText)));
        }

        /// &lt;summary&gt;
        /// Creates a Uri to look up flight pricing trends online using Bing
        /// Travel.
        /// &lt;/summary&gt;
        /// &lt;param name="departureAirport"&gt;The departure airport object.&lt;/param&gt;
        /// &lt;param name="arrivalAirport"&gt;The arrival airport object.&lt;/param&gt;
        /// &lt;param name="departure"&gt;The departure date.&lt;/param&gt;
        /// &lt;param name="arrival"&gt;The arrival date.&lt;/param&gt;
        /// &lt;param name="persons"&gt;The number of people that will be traveling.&lt;/param&gt;
        /// &lt;returns&gt;Returns a new Uri object.&lt;/returns&gt;
        public static Uri CreateAirfareSearchUri(Airport departureAirport, Airport arrivalAirport, DateTime departure, DateTime arrival, int persons)
        {
            return new Uri(string.Format(CultureInfo.InvariantCulture, AirfareSearchUriFormat, departureAirport.CodeFaa, arrivalAirport.CodeFaa, HttpUtility.UrlEncode(departure.ToShortDateString()), HttpUtility.UrlEncode(arrival.ToShortDateString()), persons.ToString(CultureInfo.InvariantCulture)));
        }
    }
}</sys:String>
    </src:SourceFile.Source>
  </src:SourceFile>
</src:SourceViewer>

    </StackPanel>
</UserControl>