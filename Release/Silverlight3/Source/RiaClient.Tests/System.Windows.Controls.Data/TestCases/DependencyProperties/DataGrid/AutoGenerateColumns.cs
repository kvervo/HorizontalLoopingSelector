// (c) Copyright Microsoft Corporation.
// This source is subject to the Microsoft Public License (Ms-PL).
// Please see http://go.microsoft.com/fwlink/?LinkID=131993 for details.
// All other rights reserved.

using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Reflection;
using System.Windows.Controls.Data.Test.DataClasses;
using System.Windows.Controls.Test;
using System.Windows.Data;
using Microsoft.Silverlight.Testing;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace System.Windows.Controls.Data.Test
{
    public partial class DataGrid_DependencyProperties_TestClass
    {
        [TestMethod]
        [Asynchronous]
        [Microsoft.VisualStudio.TestTools.UnitTesting.Description("Verify Dependency Property: (bool) DataGrid.AutoGenerateColumns.")]
        public void AutoGenerateColumns()
        {
            Type propertyType = typeof(bool);
            bool expectGet = true;
            bool expectSet = true;
            bool hasSideEffects = true;

            DataGrid control = new DataGrid();
            Assert.IsNotNull(control);
            TestPanel.Children.Add(control);
            this.EnqueueYieldThread();
            this.EnqueueCallback(delegate
            {
                // Verify dependency property member
                FieldInfo fieldInfo = typeof(DataGrid).GetField("AutoGenerateColumnsProperty", BindingFlags.Static | BindingFlags.Public);
                Assert.AreEqual(typeof(DependencyProperty), fieldInfo.FieldType, "DataGrid.AutoGenerateColumnsProperty not expected type 'DependencyProperty'.");

                // Verify dependency property's value type
                DependencyProperty property = fieldInfo.GetValue(null) as DependencyProperty;

                Assert.IsNotNull(property);

                // 


                // Verify dependency property CLR property member
                PropertyInfo propertyInfo = typeof(DataGrid).GetProperty("AutoGenerateColumns", BindingFlags.Instance | BindingFlags.Public);
                Assert.IsNotNull(propertyInfo, "Expected CLR property DataGrid.AutoGenerateColumns does not exist.");
                Assert.AreEqual(propertyType, propertyInfo.PropertyType, "DataGrid.AutoGenerateColumns not expected type 'bool'.");

                // Verify getter/setter access
                Assert.AreEqual(expectGet, propertyInfo.CanRead, "Unexpected value for propertyInfo.CanRead.");
                Assert.AreEqual(expectSet, propertyInfo.CanWrite, "Unexpected value for propertyInfo.CanWrite.");

                // Verify that we set what we get
                if (expectSet) // if expectSet == false, this block can be removed
                {
                    Assert.AreEqual(true, control.AutoGenerateColumns);

                    control.AutoGenerateColumns = false;

                    Assert.AreEqual(false, control.AutoGenerateColumns);

                    control.AutoGenerateColumns = true;

                    Assert.AreEqual(true, control.AutoGenerateColumns);
                }

                // Verify dependency property callback
                if (hasSideEffects)
                {
                    MethodInfo methodInfo = typeof(DataGrid).GetMethod("OnAutoGenerateColumnsPropertyChanged", BindingFlags.Static | BindingFlags.NonPublic);
                    Assert.IsNotNull(methodInfo, "Expected DataGrid.AutoGenerateColumns to have static, non-public side-effect callback 'OnAutoGenerateColumnsPropertyChanged'.");

                    // 
                }
                else
                {
                    MethodInfo methodInfo = typeof(DataGrid).GetMethod("OnAutoGenerateColumnsPropertyChanged", BindingFlags.Static | BindingFlags.NonPublic);
                    Assert.IsNull(methodInfo, "Expected DataGrid.AutoGenerateColumns NOT to have static side-effect callback 'OnAutoGenerateColumnsPropertyChanged'.");
                }
            });
            EnqueueTestComplete();
        }

        [TestMethod]
        [Asynchronous]
        [Microsoft.VisualStudio.TestTools.UnitTesting.Description("Check the scenario where a sort causes the DataType to change.")]
        public void AutoGenerateColumnsAfterSort()
        {
            this._autoGeneratedCount = 0;
            this._isLoaded = false;
            DataGrid dataGrid = new DataGrid();
            Assert.IsNotNull(dataGrid);
            dataGrid.Loaded += this.dataGrid_Loaded;
            dataGrid.AutoGeneratingColumn += new EventHandler<DataGridAutoGeneratingColumnEventArgs>(dataGrid_AutoGeneratingColumn);

            List<object> objects = new List<object>();
            objects.Add(new AutoGenerateParentClass() { Integer = 2 });
            objects.Add(new AutoGenerateChildClass() { Integer = 1 });
            objects.Add(new AutoGenerateParentClass() { Integer = 3 });
            dataGrid.ItemsSource = objects;

            TestPanel.Children.Add(dataGrid);
            this.EnqueueConditional(delegate {return this._isLoaded;});

            this.EnqueueCallback(delegate
            {
                Assert.AreEqual(typeof(AutoGenerateParentClass), dataGrid.DataConnection.DataType, "Wrong DataType for a List<object>.");
                Assert.AreEqual(1, dataGrid.Columns.Count, "Wrong number of columns generated.");
                Assert.AreEqual(1, this._autoGeneratedCount, "Wrong number of columns were autogenerated.");
                this._autoGeneratedCount = 0;

                // Add an original sort
                Assert.AreEqual("Integer", dataGrid.Columns[0].Header, "Wrong column generated.");
                Assert.IsNotNull(dataGrid.Columns[0].HeaderCell, "Column has no HeaderCell.");

                // The first sort should not cause the columns to be regenerated.
                dataGrid.Columns[0].HeaderCell.ProcessSort();

                // Remove the first item of the source list, which forces the DataGrid's DataType to change because
                // the first item is now a different type than it used to be
                objects.RemoveAt(0);

                // Sorting a second time will cause the collection to be reset. This time the DataGrid will see that
                // the DataType has changed, and will re-autogenerate the columns.  We should not crash in this circumstance.
                dataGrid.Columns[0].HeaderCell.ProcessSort();
            });
            this.EnqueueYieldThread();
            this.EnqueueCallback(delegate
            {
                Assert.AreEqual(typeof(AutoGenerateChildClass), dataGrid.DataConnection.DataType, "Wrong DataType after sort.");
                Assert.AreEqual(1, dataGrid.Columns.Count, "Wrong number of columns regenerated after sort.");
                Assert.AreEqual(1, this._autoGeneratedCount, "Wrong number of columns were regenerated after sort.");
            });
            EnqueueTestComplete();
        }

        #region Display Attribute Tests

        [TestMethod]
        [Asynchronous]
        [Microsoft.VisualStudio.TestTools.UnitTesting.Description("Verify that column order and header names are taken from the Display attribute.")]
        public void DisplayAttributeAddColumns()
        {
            DataGrid dataGrid = new DataGrid();
            dataGrid.AutoGenerateColumns = false;
            Assert.IsNotNull(dataGrid);
            _isLoaded = false;
            dataGrid.Loaded += new RoutedEventHandler(dataGrid_Loaded);

            DataGridTextColumn textColumn = new DataGridTextColumn();
            textColumn.Binding = new Binding("FirstGenerated");
            dataGrid.Columns.Add(textColumn);

            textColumn = new DataGridTextColumn();
            textColumn.Binding = new Binding("SecondIgnored");
            dataGrid.Columns.Add(textColumn);

            List<DisplayAttrClass> list = new List<DisplayAttrClass>();
            for (int i = 0; i < 10; i++)
            {
                list.Add(new DisplayAttrClass());
            }
            dataGrid.ItemsSource = list;

            this.TestPanel.Children.Add(dataGrid);
            EnqueueConditional(delegate { return _isLoaded; });
            this.EnqueueYieldThread();

            EnqueueCallback(delegate
            {
                Assert.AreEqual(2, dataGrid.Columns.Count, "Wrong number of columns auto-generated");
                Assert.AreEqual("1st", dataGrid.Columns[0].Header, "Incorrect order or header for added column");
                Assert.AreEqual("2nd", dataGrid.Columns[1].Header, "Incorrect order or header for added column");

                textColumn = new DataGridTextColumn();
                textColumn.Binding = new Binding("FifthGenerated");
                dataGrid.Columns.Add(textColumn);

                textColumn = new DataGridTextColumn();
                textColumn.Binding = new Binding("FirstIgnored");
                dataGrid.Columns.Add(textColumn);
            });
            this.EnqueueYieldThread();

            EnqueueCallback(delegate
            {
                Assert.AreEqual(4, dataGrid.Columns.Count, "Wrong number of columns auto-generated");
                Assert.AreEqual("1st", dataGrid.Columns[0].Header, "Incorrect order or header for added column");
                Assert.AreEqual("2nd", dataGrid.Columns[1].Header, "Incorrect order or header for added column");
                Assert.AreEqual("Fifth", dataGrid.Columns[2].Header, "Incorrect order or header for added column");
                Assert.IsNull(dataGrid.Columns[3].Header, "Incorrect order or header for added column");
            });

            EnqueueTestComplete();
        }

        [TestMethod]
        [Asynchronous]
        [Microsoft.VisualStudio.TestTools.UnitTesting.Description("Verify that column order and header names are taken from the Display attribute.")]
        public void DisplayAttributeAutoGeneration()
        {
            DataGrid dataGrid = new DataGrid();
            Assert.IsNotNull(dataGrid);
            _isLoaded = false;
            dataGrid.Loaded += new RoutedEventHandler(dataGrid_Loaded);

            List<DisplayAttrClass> list = new List<DisplayAttrClass>();
            for (int i = 0; i < 10; i++)
            {
                list.Add(new DisplayAttrClass());
            }
            dataGrid.ItemsSource = list;

            this.TestPanel.Children.Add(dataGrid);
            EnqueueConditional(delegate { return _isLoaded; });
            EnqueueCallback(delegate
            {
                Assert.AreEqual(11, dataGrid.Columns.Count, "Wrong number of columns auto-generated");
                Assert.AreEqual("1st", dataGrid.Columns[0].Header, "Incorrect order or header for auto-generated column");
                Assert.AreEqual("Second", dataGrid.Columns[1].Header, "Incorrect order or header for auto-generated column");
                Assert.AreEqual("3rd", dataGrid.Columns[2].Header, "Incorrect order or header for auto-generated column");
                Assert.AreEqual("", dataGrid.Columns[3].Header, "Incorrect order or header for auto-generated column");
                Assert.AreEqual("Fifth", dataGrid.Columns[4].Header, "Incorrect order or header for auto-generated column");
                Assert.AreEqual("SixthGenerated", dataGrid.Columns[5].Header, "Incorrect order or header for auto-generated column");
                Assert.AreEqual("7th", dataGrid.Columns[6].Header, "Incorrect order or header for auto-generated column");
                Assert.AreEqual("EighthGenerated", dataGrid.Columns[7].Header, "Incorrect order or header for auto-generated column");
                Assert.AreEqual("NinthGenerated", dataGrid.Columns[8].Header, "Incorrect order or header for auto-generated column");
                Assert.AreEqual("10th", dataGrid.Columns[9].Header, "Incorrect order or header for auto-generated column");
                Assert.AreEqual("11th", dataGrid.Columns[10].Header, "Incorrect order or header for auto-generated column");
            });

            EnqueueTestComplete();
        }

        #endregion Display Attribute Tests

        #region Editable Attribute Tests

        [TestMethod]
        [Asynchronous]
        [Microsoft.VisualStudio.TestTools.UnitTesting.Description("Verify that the Editable attribute affects Column.IsReadOnly.")]
        public void EditableAttributeTest()
        {
            DataGrid dataGrid = new DataGrid();
            Assert.IsNotNull(dataGrid);
            _isLoaded = false;
            dataGrid.Loaded += new RoutedEventHandler(dataGrid_Loaded);

            // 0
            DataGridTextColumn textColumn = new DataGridTextColumn();
            textColumn.Header = "EditableFalseString";
            textColumn.Binding = new Binding("EditableFalseString");
            dataGrid.Columns.Add(textColumn);

            // 1
            textColumn = new DataGridTextColumn();
            textColumn.Header = "EditableTrueString";
            textColumn.Binding = new Binding("EditableTrueString");
            dataGrid.Columns.Add(textColumn);

            // 2
            textColumn = new DataGridTextColumn();
            textColumn.Header = "EditableFalseSubClass.EditableFalseInt";
            textColumn.Binding = new Binding("EditableFalseSubClass.EditableFalseInt");
            dataGrid.Columns.Add(textColumn);

            // 3
            textColumn = new DataGridTextColumn();
            textColumn.Header = "EditableFalseSubClass.EditableTrueInt";
            textColumn.Binding = new Binding("EditableFalseSubClass.EditableTrueInt");
            dataGrid.Columns.Add(textColumn);

            // 4
            textColumn = new DataGridTextColumn();
            textColumn.Header = "EditableTrueSubClass.EditableFalseInt";
            textColumn.Binding = new Binding("EditableTrueSubClass.EditableFalseInt");
            dataGrid.Columns.Add(textColumn);

            // 5
            textColumn = new DataGridTextColumn();
            textColumn.Header = "EditableTrueSubClass.EditableTrueInt";
            textColumn.Binding = new Binding("EditableTrueSubClass.EditableTrueInt");
            dataGrid.Columns.Add(textColumn);

            List<EditableAttrClass> list = new List<EditableAttrClass>();
            for (int i = 0; i < 10; i++)
            {
                list.Add(new EditableAttrClass());
            }
            dataGrid.ItemsSource = list;

            this.TestPanel.Children.Add(dataGrid);
            EnqueueConditional(delegate { return _isLoaded; });
            EnqueueCallback(delegate
            {
                Assert.AreEqual(10, dataGrid.Columns.Count, "Wrong number of columns");

                // 0
                Assert.AreEqual("EditableFalseString", dataGrid.Columns[0].Header, "Incorrect header for defined column");
                Assert.IsTrue(dataGrid.Columns[0].IsReadOnly, "Incorrect IsReadOnly value of column");
                Assert.IsFalse(dataGrid.Columns[0].IsAutoGenerated, "Incorrect IsAutoGenerated value");

                // 1
                Assert.AreEqual("EditableTrueString", dataGrid.Columns[1].Header, "Incorrect header for defined column");
                Assert.IsFalse(dataGrid.Columns[1].IsReadOnly, "Incorrect IsReadOnly value of column");
                Assert.IsFalse(dataGrid.Columns[1].IsAutoGenerated, "Incorrect IsAutoGenerated value");

                // 2
                Assert.AreEqual("EditableFalseSubClass.EditableFalseInt", dataGrid.Columns[2].Header, "Incorrect header for defined column");
                Assert.IsTrue(dataGrid.Columns[2].IsReadOnly, "Incorrect IsReadOnly value of column");
                Assert.IsFalse(dataGrid.Columns[2].IsAutoGenerated, "Incorrect IsAutoGenerated value");

                // 3
                Assert.AreEqual("EditableFalseSubClass.EditableTrueInt", dataGrid.Columns[3].Header, "Incorrect header for defined column");
                Assert.IsTrue(dataGrid.Columns[3].IsReadOnly, "Incorrect IsReadOnly value of column");
                Assert.IsFalse(dataGrid.Columns[3].IsAutoGenerated, "Incorrect IsAutoGenerated value");

                // 4
                Assert.AreEqual("EditableTrueSubClass.EditableFalseInt", dataGrid.Columns[4].Header, "Incorrect header for defined column");
                Assert.IsTrue(dataGrid.Columns[4].IsReadOnly, "Incorrect IsReadOnly value of column");
                Assert.IsFalse(dataGrid.Columns[4].IsAutoGenerated, "Incorrect IsAutoGenerated value");

                // 5
                Assert.AreEqual("EditableTrueSubClass.EditableTrueInt", dataGrid.Columns[5].Header, "Incorrect header for defined column");
                Assert.IsFalse(dataGrid.Columns[5].IsReadOnly, "Incorrect IsReadOnly value of column");
                Assert.IsFalse(dataGrid.Columns[5].IsAutoGenerated, "Incorrect IsAutoGenerated value");

                // 6 (auto-generated)
                Assert.AreEqual("EditableFalseString", dataGrid.Columns[6].Header, "Incorrect header for auto-generated column");
                Assert.IsTrue(dataGrid.Columns[6].IsReadOnly, "Incorrect IsReadOnly value of column");
                Assert.IsTrue(dataGrid.Columns[6].IsAutoGenerated, "Incorrect IsAutoGenerated value");

                // 7 (auto-generated)
                Assert.AreEqual("EditableTrueString", dataGrid.Columns[7].Header, "Incorrect header for auto-generated column");
                Assert.IsFalse(dataGrid.Columns[7].IsReadOnly, "Incorrect IsReadOnly value of column");
                Assert.IsTrue(dataGrid.Columns[7].IsAutoGenerated, "Incorrect IsAutoGenerated value");

                // 8 (auto-generated)
                Assert.AreEqual("EditableFalseSubClass", dataGrid.Columns[8].Header, "Incorrect header for auto-generated column");
                Assert.IsTrue(dataGrid.Columns[8].IsReadOnly, "Incorrect IsReadOnly value of column");
                Assert.IsTrue(dataGrid.Columns[8].IsAutoGenerated, "Incorrect IsAutoGenerated value");

                // 9 (auto-generated)
                Assert.AreEqual("EditableTrueSubClass", dataGrid.Columns[9].Header, "Incorrect header for auto-generated column");
                Assert.IsTrue(dataGrid.Columns[9].IsReadOnly, "Incorrect IsReadOnly value of column");
                Assert.IsTrue(dataGrid.Columns[9].IsAutoGenerated, "Incorrect IsAutoGenerated value");
            });

            EnqueueTestComplete();
        }

        #endregion Editable Attribute Tests

        /// <summary>
        /// Tests autogenerating columns when the first item is added when the underlying collection does not implement INotifyCollectionChanged
        /// </summary>
        [TestMethod]
        [Asynchronous]
        [Microsoft.VisualStudio.TestTools.UnitTesting.Description("Tests autogenerating columns when the first item is added when the underlying collection does not implement INotifyCollectionChanged")]
        public void NonINCCGenerateOnAdd()
        {
            this._autoGeneratedCount = 0;
            this._isLoaded = false;
            DataGrid dataGrid = new DataGrid();
            Assert.IsNotNull(dataGrid);
            dataGrid.Loaded += this.dataGrid_Loaded;
            TestPanel.Children.Add(dataGrid);
            dataGrid.AutoGeneratingColumn += new EventHandler<DataGridAutoGeneratingColumnEventArgs>(dataGrid_AutoGeneratingColumn);
            List<Customer> customers = new List<Customer>();
            dataGrid.ItemsSource = new PagedCollectionView(customers);

            for (int i = 0; i < 20; i++)
            {
                customers.Add(new Customer());
            }
            this.EnqueueConditional(delegate { return this._isLoaded; });
            this.EnqueueYieldThread();

            this.EnqueueCallback(delegate
            {
                Assert.AreEqual(10, this._autoGeneratedCount, "Wrong number of columns were generated.");
            });
            EnqueueTestComplete();
        }

        #region ReadOnly Attribute Tests

        [TestMethod]
        [Asynchronous]
        [Microsoft.VisualStudio.TestTools.UnitTesting.Description("Verify that the ReadOnly attribute affects Column.IsReadOnly.")]
        public void ReadOnlyAttributeTest()
        {
            DataGrid dataGrid = new DataGrid();
            Assert.IsNotNull(dataGrid);
            _isLoaded = false;
            dataGrid.Loaded += new RoutedEventHandler(dataGrid_Loaded);

            // 0
            DataGridTextColumn textColumn = new DataGridTextColumn();
            textColumn.Header = "ReadOnlyFalseInt";
            textColumn.Binding = new Binding("ReadOnlyFalseInt");
            dataGrid.Columns.Add(textColumn);

            // 1
            textColumn = new DataGridTextColumn();
            textColumn.Header = "ReadOnlyTrueInt";
            textColumn.Binding = new Binding("ReadOnlyTrueInt");
            dataGrid.Columns.Add(textColumn);

            // 2
            textColumn = new DataGridTextColumn();
            textColumn.Header = "Int";
            textColumn.Binding = new Binding("Int");
            dataGrid.Columns.Add(textColumn);

            // 3
            textColumn = new DataGridTextColumn();
            textColumn.Header = "SubClass.Int";
            textColumn.Binding = new Binding("SubClass.Int");
            dataGrid.Columns.Add(textColumn);

            // 4
            textColumn = new DataGridTextColumn();
            textColumn.Header = "SubClass.ReadOnlyInt";
            textColumn.Binding = new Binding("SubClass.ReadOnlyInt");
            dataGrid.Columns.Add(textColumn);

            // 5
            textColumn = new DataGridTextColumn();
            textColumn.Header = "ReadOnlySubClass.Int";
            textColumn.Binding = new Binding("ReadOnlySubClass.Int");
            dataGrid.Columns.Add(textColumn);

            // 6
            textColumn = new DataGridTextColumn();
            textColumn.Header = "ReadOnlySubClass.ReadOnlyInt";
            textColumn.Binding = new Binding("ReadOnlySubClass.ReadOnlyInt");
            dataGrid.Columns.Add(textColumn);

            // 7
            textColumn = new DataGridTextColumn();
            textColumn.Header = "SubClass_ReadOnly.Int";
            textColumn.Binding = new Binding("SubClass_ReadOnly.Int");
            dataGrid.Columns.Add(textColumn);

            // 8
            textColumn = new DataGridTextColumn();
            textColumn.Header = "SubClass_ReadOnly.ReadOnlyInt";
            textColumn.Binding = new Binding("SubClass_ReadOnly.ReadOnlyInt");
            dataGrid.Columns.Add(textColumn);

            // 9
            textColumn = new DataGridTextColumn();
            textColumn.Header = "ReadOnlySubClass_ReadOnly.Int";
            textColumn.Binding = new Binding("ReadOnlySubClass_ReadOnly.Int");
            dataGrid.Columns.Add(textColumn);

            // 10
            textColumn = new DataGridTextColumn();
            textColumn.Header = "ReadOnlySubClass_ReadOnly.ReadOnlyInt";
            textColumn.Binding = new Binding("ReadOnlySubClass_ReadOnly.ReadOnlyInt");
            dataGrid.Columns.Add(textColumn);

            List<ReadOnlyAttrClass> list = new List<ReadOnlyAttrClass>();
            for (int i = 0; i < 10; i++)
            {
                list.Add(new ReadOnlyAttrClass());
            }
            dataGrid.ItemsSource = list;

            this.TestPanel.Children.Add(dataGrid);

            EnqueueConditional(delegate { return _isLoaded; });

            this.EnqueueYieldThread();
            EnqueueCallback(delegate
            {
                Assert.AreEqual(18, dataGrid.Columns.Count, "Wrong number of columns");

                // 0
                Assert.AreEqual("ReadOnlyFalseInt", dataGrid.Columns[0].Header, "Incorrect header for defined column");
                Assert.IsFalse(dataGrid.Columns[0].IsReadOnly, "Incorrect IsReadOnly value of column");
                Assert.IsFalse(dataGrid.Columns[0].IsAutoGenerated, "Incorrect IsAutoGenerated value");

                // 1
                Assert.AreEqual("ReadOnlyTrueInt", dataGrid.Columns[1].Header, "Incorrect header for defined column");
                Assert.IsTrue(dataGrid.Columns[1].IsReadOnly, "Incorrect IsReadOnly value of column");
                Assert.IsFalse(dataGrid.Columns[1].IsAutoGenerated, "Incorrect IsAutoGenerated value");

                // 2
                Assert.AreEqual("Int", dataGrid.Columns[2].Header, "Incorrect header for defined column");
                Assert.IsFalse(dataGrid.Columns[2].IsReadOnly, "Incorrect IsReadOnly value of column");
                Assert.IsFalse(dataGrid.Columns[2].IsAutoGenerated, "Incorrect IsAutoGenerated value");

                // 3
                Assert.AreEqual("SubClass.Int", dataGrid.Columns[3].Header, "Incorrect header for defined column");
                Assert.IsFalse(dataGrid.Columns[3].IsReadOnly, "Incorrect IsReadOnly value of column");
                Assert.IsFalse(dataGrid.Columns[3].IsAutoGenerated, "Incorrect IsAutoGenerated value");

                // 4
                Assert.AreEqual("SubClass.ReadOnlyInt", dataGrid.Columns[4].Header, "Incorrect header for defined column");
                Assert.IsTrue(dataGrid.Columns[4].IsReadOnly, "Incorrect IsReadOnly value of column");
                Assert.IsFalse(dataGrid.Columns[4].IsAutoGenerated, "Incorrect IsAutoGenerated value");

                // 5
                Assert.AreEqual("ReadOnlySubClass.Int", dataGrid.Columns[5].Header, "Incorrect header for defined column");
                Assert.IsTrue(dataGrid.Columns[5].IsReadOnly, "Incorrect IsReadOnly value of column");
                Assert.IsFalse(dataGrid.Columns[5].IsAutoGenerated, "Incorrect IsAutoGenerated value");

                // 6
                Assert.AreEqual("ReadOnlySubClass.ReadOnlyInt", dataGrid.Columns[6].Header, "Incorrect header for defined column");
                Assert.IsTrue(dataGrid.Columns[6].IsReadOnly, "Incorrect IsReadOnly value of column");
                Assert.IsFalse(dataGrid.Columns[6].IsAutoGenerated, "Incorrect IsAutoGenerated value");

                // 7
                Assert.AreEqual("SubClass_ReadOnly.Int", dataGrid.Columns[7].Header, "Incorrect header for defined column");
                Assert.IsTrue(dataGrid.Columns[7].IsReadOnly, "Incorrect IsReadOnly value of column");
                Assert.IsFalse(dataGrid.Columns[7].IsAutoGenerated, "Incorrect IsAutoGenerated value");

                // 8
                Assert.AreEqual("SubClass_ReadOnly.ReadOnlyInt", dataGrid.Columns[8].Header, "Incorrect header for defined column");
                Assert.IsTrue(dataGrid.Columns[8].IsReadOnly, "Incorrect IsReadOnly value of column");
                Assert.IsFalse(dataGrid.Columns[8].IsAutoGenerated, "Incorrect IsAutoGenerated value");

                // 9
                Assert.AreEqual("ReadOnlySubClass_ReadOnly.Int", dataGrid.Columns[9].Header, "Incorrect header for defined column");
                Assert.IsTrue(dataGrid.Columns[9].IsReadOnly, "Incorrect IsReadOnly value of column");
                Assert.IsFalse(dataGrid.Columns[9].IsAutoGenerated, "Incorrect IsAutoGenerated value");

                // 10
                Assert.AreEqual("ReadOnlySubClass_ReadOnly.ReadOnlyInt", dataGrid.Columns[10].Header, "Incorrect header for defined column");
                Assert.IsTrue(dataGrid.Columns[10].IsReadOnly, "Incorrect IsReadOnly value of column");
                Assert.IsFalse(dataGrid.Columns[10].IsAutoGenerated, "Incorrect IsAutoGenerated value");

                // 11 (auto-generated)
                Assert.AreEqual("ReadOnlyFalseInt", dataGrid.Columns[11].Header, "Incorrect header for auto-generated column");
                Assert.IsFalse(dataGrid.Columns[11].IsReadOnly, "Incorrect IsReadOnly value of column");
                Assert.IsTrue(dataGrid.Columns[11].IsAutoGenerated, "Incorrect IsAutoGenerated value");

                // 12 (auto-generated)
                Assert.AreEqual("ReadOnlyTrueInt", dataGrid.Columns[12].Header, "Incorrect header for auto-generated column");
                Assert.IsTrue(dataGrid.Columns[12].IsReadOnly, "Incorrect IsReadOnly value of column");
                Assert.IsTrue(dataGrid.Columns[12].IsAutoGenerated, "Incorrect IsAutoGenerated value");

                // 13 (auto-generated)
                Assert.AreEqual("Int", dataGrid.Columns[13].Header, "Incorrect header for auto-generated column");
                Assert.IsFalse(dataGrid.Columns[13].IsReadOnly, "Incorrect IsReadOnly value of column");
                Assert.IsTrue(dataGrid.Columns[13].IsAutoGenerated, "Incorrect IsAutoGenerated value");

                // 14 (auto-generated)
                Assert.AreEqual("SubClass", dataGrid.Columns[14].Header, "Incorrect header for auto-generated column");
                Assert.IsTrue(dataGrid.Columns[14].IsReadOnly, "Incorrect IsReadOnly value of column");
                Assert.IsTrue(dataGrid.Columns[14].IsAutoGenerated, "Incorrect IsAutoGenerated value");

                // 15 (auto-generated)
                Assert.AreEqual("ReadOnlySubClass", dataGrid.Columns[15].Header, "Incorrect header for auto-generated column");
                Assert.IsTrue(dataGrid.Columns[15].IsReadOnly, "Incorrect IsReadOnly value of column");
                Assert.IsTrue(dataGrid.Columns[15].IsAutoGenerated, "Incorrect IsAutoGenerated value");

                // 16 (auto-generated)
                Assert.AreEqual("SubClass_ReadOnly", dataGrid.Columns[16].Header, "Incorrect header for auto-generated column");
                Assert.IsTrue(dataGrid.Columns[16].IsReadOnly, "Incorrect IsReadOnly value of column");
                Assert.IsTrue(dataGrid.Columns[16].IsAutoGenerated, "Incorrect IsAutoGenerated value");

                // 17 (auto-generated)
                Assert.AreEqual("ReadOnlySubClass_ReadOnly", dataGrid.Columns[17].Header, "Incorrect header for auto-generated column");
                Assert.IsTrue(dataGrid.Columns[17].IsReadOnly, "Incorrect IsReadOnly value of column");
                Assert.IsTrue(dataGrid.Columns[17].IsAutoGenerated, "Incorrect IsAutoGenerated value");
            });

            EnqueueTestComplete();
        }

        #endregion ReadOnly Attribute Tests

        private void dataGrid_AutoGeneratingColumn(object sender, DataGridAutoGeneratingColumnEventArgs e)
        {
            this._autoGeneratedCount++;
        }

        private void dataGrid_Loaded(object sender, RoutedEventArgs e)
        {
            _isLoaded = true;
        }

        #region Data

        private int _autoGeneratedCount = 0;
        private bool _isLoaded = false;

        public class AutoGenerateParentClass
        {
            public int Integer { get; set; }
        }

        public class AutoGenerateChildClass : AutoGenerateParentClass
        {
        }

        public class DisplayAttrClass
        {
            [Display(Name = "11th", Order = int.MaxValue)]
            public string EleventhGenerated { get; set; }

            [Display(Name = "", Order = 2)]
            public string FourthGenerated { get; set; }

            public string EighthGenerated { get; set; }

            [Display(AutoGenerateField = false, Order = 2)]
            public string FirstIgnored { get; set; }

            [Display(AutoGenerateField = true, ShortName = "1st", Name = "First", Order = 0)]
            public string FirstGenerated { get; set; }

            [Display(Name = "Fifth", Order = 5)]
            public string FifthGenerated { get; set; }

            [Display(AutoGenerateField = false, ShortName = "2nd")]
            public string SecondIgnored { get; set; }

            [Display()]
            public string NinthGenerated { get; set; }

            [Display(Name = "10th", Order = int.MaxValue - 10)]
            public string TenthGenerated { get; set; }

            [Display(ShortName = "3rd", Order = 1)]
            public string ThirdGenerated { get; set; }

            [Display(Order = 6)]
            public string SixthGenerated { get; set; }

            [Display(Name = "Second", Order = 0)]
            public string SecondGenerated { get; set; }

            [Display(ShortName = "7th", Name = "", Order = 100)]
            public string SeventhGenerated { get; set; }

        }

        public class EditableAttrClass
        {
            [Editable(false)]
            public string EditableFalseString { get; set; }

            public string EditableTrueString { get; set; }

            [Editable(false)]
            public EditableAttrSubClass EditableFalseSubClass { get; set; }

            public EditableAttrSubClass EditableTrueSubClass { get; set; }
        }

        public class EditableAttrSubClass
        {
            [Editable(false)]
            public int EditableFalseInt { get; set; }

            [Editable(true)]
            public int EditableTrueInt { get; set; }
        }

        public class ReadOnlyAttrClass
        {
            [ReadOnly(false)]
            public int ReadOnlyFalseInt { get; set; }

            [ReadOnly(true)]
            public int ReadOnlyTrueInt { get; set; }

            public int Int { get; set; }

            public ReadOnlyAttrSubClass SubClass { get; set; }

            [ReadOnly(true)]
            public ReadOnlyAttrSubClass ReadOnlySubClass { get; set; }

            public ReadOnlyAttrSubClass_ReadOnly SubClass_ReadOnly { get; set; }

            [ReadOnly(true)]
            public ReadOnlyAttrSubClass_ReadOnly ReadOnlySubClass_ReadOnly { get; set; }
        }

        public class ReadOnlyAttrSubClass
        {
            public int Int { get; set; }

            [ReadOnly(true)]
            public int ReadOnlyInt { get; set; }
        }

        [ReadOnly(true)]
        public class ReadOnlyAttrSubClass_ReadOnly
        {
            public int Int { get; set; }

            [ReadOnly(true)]
            public int ReadOnlyInt { get; set; }
        }

        #endregion
    }
}
