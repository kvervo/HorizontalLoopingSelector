<!--
// (c) Copyright Microsoft Corporation.
// This source is subject to the Microsoft Public License (Ms-PL).
// Please see http://go.microsoft.com/fwlink/?LinkID=131993 for details.
// All other rights reserved.
-->

<UserControl
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:sys="clr-namespace:System;assembly=mscorlib"
    xmlns:controlsInputToolkit="clr-namespace:System.Windows.Controls;assembly=System.Windows.Controls.Input.Toolkit"
    x:Class="System.Windows.Controls.Samples.ContextMenuSample">
    <StackPanel>
        <ContentControl
            Content="ContextMenu"
            Style="{StaticResource Header}" />
        <TextBlock
            Style="{StaticResource Information}">
            The ContextMenu control makes it easy for developers to add a pop-up menu with context-specific commands to their application.
            By using the ContextMenuService attached DepedencyProperty, a ContextMenu can be associated with any element - then users can right-click on that part of the interface for a list of relevant options.
            The MenuItem class supports arbitrary content, icons, the Click event, and the ICommand interface, so applications authors have lots of flexibility to enable compelling user scenarios.
            <LineBreak />
        </TextBlock>

        <Border
            BorderBrush="Gray"
            BorderThickness="1"
            Padding="10"
            Height="300">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="2*"/>
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition/>
                </Grid.RowDefinitions>
                <TextBlock
                    Grid.Column="0"
                    Grid.Row="0"
                    Text="Inbox"
                    FontWeight="Bold"
                    FontSize="12"/>
                <Grid
                    Grid.Column="1"
                    Grid.Row="1">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition/>
                    </Grid.ColumnDefinitions>
                    <TextBlock
                        Grid.Column="0"
                        Text="Subject: "
                        FontWeight="Bold"/>
                    <TextBlock
                        x:Name="EmailSubject"
                        Grid.Column="1"
                        Text="{Binding SelectedItem.Subject, ElementName=EmailList}"/>
                </Grid>

                <!-- This ContextMenu uses Click handlers and gets its icons from Brush resources -->
                <ListBox
                    x:Name="EmailList"
                    Grid.Column="0"
                    Grid.Row="1"
                    Grid.RowSpan="2">
                    <ListBox.Resources>
                        <ImageBrush x:Key="MoveUpBrush" ImageSource="/System.Windows.Controls.Samples;component/ContextMenu/MoveUp.png"/>
                        <ImageBrush x:Key="MoveDownBrush" ImageSource="/System.Windows.Controls.Samples;component/ContextMenu/MoveDown.png"/>
                        <ImageBrush x:Key="DeleteBrush" ImageSource="/System.Windows.Controls.Samples;component/ContextMenu/Delete.png"/>
                    </ListBox.Resources>
                    <ListBox.ItemTemplate>
                        <DataTemplate>
                            <TextBlock Text="{Binding Subject}">

                                <controlsInputToolkit:ContextMenuService.ContextMenu>
                                    <controlsInputToolkit:ContextMenu>
                                        <controlsInputToolkit:MenuItem Header="Move Up" Click="MoveUp_Click">
                                            <controlsInputToolkit:MenuItem.Icon>
                                                <Rectangle Width="16" Height="16" Fill="{StaticResource MoveUpBrush}"/>
                                            </controlsInputToolkit:MenuItem.Icon>
                                        </controlsInputToolkit:MenuItem>
                                        <controlsInputToolkit:MenuItem Header="Move Down" Click="MoveDown_Click">
                                            <controlsInputToolkit:MenuItem.Icon>
                                                <Rectangle Width="16" Height="16" Fill="{StaticResource MoveDownBrush}"/>
                                            </controlsInputToolkit:MenuItem.Icon>
                                        </controlsInputToolkit:MenuItem>
                                        <controlsInputToolkit:Separator/>
                                        <controlsInputToolkit:MenuItem Header="Delete" Click="Delete_Click">
                                            <controlsInputToolkit:MenuItem.Icon>
                                                <Rectangle Width="16" Height="16" Fill="{StaticResource DeleteBrush}"/>
                                            </controlsInputToolkit:MenuItem.Icon>
                                        </controlsInputToolkit:MenuItem>
                                    </controlsInputToolkit:ContextMenu>
                                </controlsInputToolkit:ContextMenuService.ContextMenu>

                            </TextBlock>
                        </DataTemplate>
                    </ListBox.ItemTemplate>
                    <ListBox.ItemContainerStyle>
                        <Style TargetType="ListBoxItem">
                            <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                        </Style>
                    </ListBox.ItemContainerStyle>
                </ListBox>

                <!-- This ContextMenu uses ICommand implementations and gets its icons from UI
                     elements (top two MenuItems) and Images (bottom two MenuItems)
                     Note: The bottom two MenuItems will disable when the font is as small/large
                     as it can get -->
                <TextBox
                    x:Name="EmailBody"
                    Grid.Column="1"
                    Grid.Row="2"
                    Text="{Binding SelectedItem.Body, ElementName=EmailList}"
                    TextWrapping="Wrap"
                    IsReadOnly="True"
                    FontFamily="Lucida Grande,Arial"
                    VerticalScrollBarVisibility="Auto"
                    FontSize="12">

                    <controlsInputToolkit:ContextMenuService.ContextMenu>
                        <controlsInputToolkit:ContextMenu>
                            <controlsInputToolkit:MenuItem Header="Monospace" Command="{Binding ChangeFontFaceCommand}" CommandParameter="Courier New">
                                <controlsInputToolkit:MenuItem.Icon>
                                    <Viewbox>
                                        <TextBlock Text="A" FontFamily="Courier New"/>
                                    </Viewbox>
                                </controlsInputToolkit:MenuItem.Icon>
                            </controlsInputToolkit:MenuItem>
                            <controlsInputToolkit:MenuItem Header="Proportional" Command="{Binding ChangeFontFaceCommand}" CommandParameter="Arial">
                                <controlsInputToolkit:MenuItem.Icon>
                                    <Viewbox>
                                        <TextBlock Text="A" FontFamily="Arial"/>
                                    </Viewbox>
                                </controlsInputToolkit:MenuItem.Icon>
                            </controlsInputToolkit:MenuItem>
                            <controlsInputToolkit:Separator/>
                            <controlsInputToolkit:MenuItem Header="Larger text" Command="{Binding ChangeFontSizeCommand}">
                                <controlsInputToolkit:MenuItem.CommandParameter>
                                    <sys:Int32>2</sys:Int32>
                                </controlsInputToolkit:MenuItem.CommandParameter>
                                <controlsInputToolkit:MenuItem.Icon>
                                    <Image Source="/System.Windows.Controls.Samples;component/ContextMenu/ZoomIn.png"/>
                                </controlsInputToolkit:MenuItem.Icon>
                            </controlsInputToolkit:MenuItem>
                            <controlsInputToolkit:MenuItem Header="Smaller text" Command="{Binding ChangeFontSizeCommand}">
                                <controlsInputToolkit:MenuItem.CommandParameter>
                                    <sys:Int32>-2</sys:Int32>
                                </controlsInputToolkit:MenuItem.CommandParameter>
                                <controlsInputToolkit:MenuItem.Icon>
                                    <Image Source="/System.Windows.Controls.Samples;component/ContextMenu/ZoomOut.png"/>
                                </controlsInputToolkit:MenuItem.Icon>
                            </controlsInputToolkit:MenuItem>
                        </controlsInputToolkit:ContextMenu>
                    </controlsInputToolkit:ContextMenuService.ContextMenu>

                </TextBox>
            </Grid>
        </Border>

        <src:SourceViewer xmlns:src="clr-namespace:System.Windows.Controls.Samples;assembly=System.Windows.Controls.Samples.Common" xmlns:sys="clr-namespace:System;assembly=mscorlib">
  <src:SourceFile Path="ContextMenuSample.xaml">
    <src:SourceFile.Source>
      <sys:String xml:space="preserve">&lt;!--
// (c) Copyright Microsoft Corporation.
// This source is subject to the Microsoft Public License (Ms-PL).
// Please see http://go.microsoft.com/fwlink/?LinkID=131993 for details.
// All other rights reserved.
--&gt;

&lt;UserControl
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:sys="clr-namespace:System;assembly=mscorlib"
    xmlns:controlsInputToolkit="clr-namespace:System.Windows.Controls;assembly=System.Windows.Controls.Input.Toolkit"
    x:Class="System.Windows.Controls.Samples.ContextMenuSample"&gt;
    &lt;StackPanel&gt;
        &lt;ContentControl
            Content="ContextMenu"
            Style="{StaticResource Header}" /&gt;
        &lt;TextBlock
            Style="{StaticResource Information}"&gt;
            The ContextMenu control makes it easy for developers to add a pop-up menu with context-specific commands to their application.
            By using the ContextMenuService attached DepedencyProperty, a ContextMenu can be associated with any element - then users can right-click on that part of the interface for a list of relevant options.
            The MenuItem class supports arbitrary content, icons, the Click event, and the ICommand interface, so applications authors have lots of flexibility to enable compelling user scenarios.
            &lt;LineBreak /&gt;
        &lt;/TextBlock&gt;

        &lt;Border
            BorderBrush="Gray"
            BorderThickness="1"
            Padding="10"
            Height="300"&gt;
            &lt;Grid&gt;
                &lt;Grid.ColumnDefinitions&gt;
                    &lt;ColumnDefinition Width="*"/&gt;
                    &lt;ColumnDefinition Width="2*"/&gt;
                &lt;/Grid.ColumnDefinitions&gt;
                &lt;Grid.RowDefinitions&gt;
                    &lt;RowDefinition Height="Auto"/&gt;
                    &lt;RowDefinition Height="Auto"/&gt;
                    &lt;RowDefinition/&gt;
                &lt;/Grid.RowDefinitions&gt;
                &lt;TextBlock
                    Grid.Column="0"
                    Grid.Row="0"
                    Text="Inbox"
                    FontWeight="Bold"
                    FontSize="12"/&gt;
                &lt;Grid
                    Grid.Column="1"
                    Grid.Row="1"&gt;
                    &lt;Grid.ColumnDefinitions&gt;
                        &lt;ColumnDefinition Width="Auto"/&gt;
                        &lt;ColumnDefinition/&gt;
                    &lt;/Grid.ColumnDefinitions&gt;
                    &lt;TextBlock
                        Grid.Column="0"
                        Text="Subject: "
                        FontWeight="Bold"/&gt;
                    &lt;TextBlock
                        x:Name="EmailSubject"
                        Grid.Column="1"
                        Text="{Binding SelectedItem.Subject, ElementName=EmailList}"/&gt;
                &lt;/Grid&gt;

                &lt;!-- This ContextMenu uses Click handlers and gets its icons from Brush resources --&gt;
                &lt;ListBox
                    x:Name="EmailList"
                    Grid.Column="0"
                    Grid.Row="1"
                    Grid.RowSpan="2"&gt;
                    &lt;ListBox.Resources&gt;
                        &lt;ImageBrush x:Key="MoveUpBrush" ImageSource="/System.Windows.Controls.Samples;component/ContextMenu/MoveUp.png"/&gt;
                        &lt;ImageBrush x:Key="MoveDownBrush" ImageSource="/System.Windows.Controls.Samples;component/ContextMenu/MoveDown.png"/&gt;
                        &lt;ImageBrush x:Key="DeleteBrush" ImageSource="/System.Windows.Controls.Samples;component/ContextMenu/Delete.png"/&gt;
                    &lt;/ListBox.Resources&gt;
                    &lt;ListBox.ItemTemplate&gt;
                        &lt;DataTemplate&gt;
                            &lt;TextBlock Text="{Binding Subject}"&gt;

                                &lt;controlsInputToolkit:ContextMenuService.ContextMenu&gt;
                                    &lt;controlsInputToolkit:ContextMenu&gt;
                                        &lt;controlsInputToolkit:MenuItem Header="Move Up" Click="MoveUp_Click"&gt;
                                            &lt;controlsInputToolkit:MenuItem.Icon&gt;
                                                &lt;Rectangle Width="16" Height="16" Fill="{StaticResource MoveUpBrush}"/&gt;
                                            &lt;/controlsInputToolkit:MenuItem.Icon&gt;
                                        &lt;/controlsInputToolkit:MenuItem&gt;
                                        &lt;controlsInputToolkit:MenuItem Header="Move Down" Click="MoveDown_Click"&gt;
                                            &lt;controlsInputToolkit:MenuItem.Icon&gt;
                                                &lt;Rectangle Width="16" Height="16" Fill="{StaticResource MoveDownBrush}"/&gt;
                                            &lt;/controlsInputToolkit:MenuItem.Icon&gt;
                                        &lt;/controlsInputToolkit:MenuItem&gt;
                                        &lt;controlsInputToolkit:Separator/&gt;
                                        &lt;controlsInputToolkit:MenuItem Header="Delete" Click="Delete_Click"&gt;
                                            &lt;controlsInputToolkit:MenuItem.Icon&gt;
                                                &lt;Rectangle Width="16" Height="16" Fill="{StaticResource DeleteBrush}"/&gt;
                                            &lt;/controlsInputToolkit:MenuItem.Icon&gt;
                                        &lt;/controlsInputToolkit:MenuItem&gt;
                                    &lt;/controlsInputToolkit:ContextMenu&gt;
                                &lt;/controlsInputToolkit:ContextMenuService.ContextMenu&gt;

                            &lt;/TextBlock&gt;
                        &lt;/DataTemplate&gt;
                    &lt;/ListBox.ItemTemplate&gt;
                    &lt;ListBox.ItemContainerStyle&gt;
                        &lt;Style TargetType="ListBoxItem"&gt;
                            &lt;Setter Property="HorizontalContentAlignment" Value="Stretch"/&gt;
                        &lt;/Style&gt;
                    &lt;/ListBox.ItemContainerStyle&gt;
                &lt;/ListBox&gt;

                &lt;!-- This ContextMenu uses ICommand implementations and gets its icons from UI
                     elements (top two MenuItems) and Images (bottom two MenuItems)
                     Note: The bottom two MenuItems will disable when the font is as small/large
                     as it can get --&gt;
                &lt;TextBox
                    x:Name="EmailBody"
                    Grid.Column="1"
                    Grid.Row="2"
                    Text="{Binding SelectedItem.Body, ElementName=EmailList}"
                    TextWrapping="Wrap"
                    IsReadOnly="True"
                    FontFamily="Lucida Grande,Arial"
                    VerticalScrollBarVisibility="Auto"
                    FontSize="12"&gt;

                    &lt;controlsInputToolkit:ContextMenuService.ContextMenu&gt;
                        &lt;controlsInputToolkit:ContextMenu&gt;
                            &lt;controlsInputToolkit:MenuItem Header="Monospace" Command="{Binding ChangeFontFaceCommand}" CommandParameter="Courier New"&gt;
                                &lt;controlsInputToolkit:MenuItem.Icon&gt;
                                    &lt;Viewbox&gt;
                                        &lt;TextBlock Text="A" FontFamily="Courier New"/&gt;
                                    &lt;/Viewbox&gt;
                                &lt;/controlsInputToolkit:MenuItem.Icon&gt;
                            &lt;/controlsInputToolkit:MenuItem&gt;
                            &lt;controlsInputToolkit:MenuItem Header="Proportional" Command="{Binding ChangeFontFaceCommand}" CommandParameter="Arial"&gt;
                                &lt;controlsInputToolkit:MenuItem.Icon&gt;
                                    &lt;Viewbox&gt;
                                        &lt;TextBlock Text="A" FontFamily="Arial"/&gt;
                                    &lt;/Viewbox&gt;
                                &lt;/controlsInputToolkit:MenuItem.Icon&gt;
                            &lt;/controlsInputToolkit:MenuItem&gt;
                            &lt;controlsInputToolkit:Separator/&gt;
                            &lt;controlsInputToolkit:MenuItem Header="Larger text" Command="{Binding ChangeFontSizeCommand}"&gt;
                                &lt;controlsInputToolkit:MenuItem.CommandParameter&gt;
                                    &lt;sys:Int32&gt;2&lt;/sys:Int32&gt;
                                &lt;/controlsInputToolkit:MenuItem.CommandParameter&gt;
                                &lt;controlsInputToolkit:MenuItem.Icon&gt;
                                    &lt;Image Source="/System.Windows.Controls.Samples;component/ContextMenu/ZoomIn.png"/&gt;
                                &lt;/controlsInputToolkit:MenuItem.Icon&gt;
                            &lt;/controlsInputToolkit:MenuItem&gt;
                            &lt;controlsInputToolkit:MenuItem Header="Smaller text" Command="{Binding ChangeFontSizeCommand}"&gt;
                                &lt;controlsInputToolkit:MenuItem.CommandParameter&gt;
                                    &lt;sys:Int32&gt;-2&lt;/sys:Int32&gt;
                                &lt;/controlsInputToolkit:MenuItem.CommandParameter&gt;
                                &lt;controlsInputToolkit:MenuItem.Icon&gt;
                                    &lt;Image Source="/System.Windows.Controls.Samples;component/ContextMenu/ZoomOut.png"/&gt;
                                &lt;/controlsInputToolkit:MenuItem.Icon&gt;
                            &lt;/controlsInputToolkit:MenuItem&gt;
                        &lt;/controlsInputToolkit:ContextMenu&gt;
                    &lt;/controlsInputToolkit:ContextMenuService.ContextMenu&gt;

                &lt;/TextBox&gt;
            &lt;/Grid&gt;
        &lt;/Border&gt;
    &lt;/StackPanel&gt;
&lt;/UserControl&gt;</sys:String>
    </src:SourceFile.Source>
  </src:SourceFile>
  <src:SourceFile Path="ContextMenuSample.xaml.cs">
    <src:SourceFile.Source>
      <sys:String xml:space="preserve">// (c) Copyright Microsoft Corporation.
// This source is subject to the Microsoft Public License (Ms-PL).
// Please see http://go.microsoft.com/fwlink/?LinkID=131993 for details.
// All other rights reserved.

using System;
using System.Collections.ObjectModel;
using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;

namespace System.Windows.Controls.Samples
{
    /// &lt;summary&gt;
    /// Sample page demonstrating the ContextMenu.
    /// &lt;/summary&gt;
    [Sample("ContextMenu", DifficultyLevel.Basic, "ContextMenu")]
    public partial class ContextMenuSample : UserControl
    {
        /// &lt;summary&gt;
        /// Stores a reference to a random number generator (initialized to a constant seed value).
        /// &lt;/summary&gt;
        private readonly Random _rand = new Random(0);

        /// &lt;summary&gt;
        /// Stores a reference to the collection of sample Email objects.
        /// &lt;/summary&gt;
        private readonly ObservableCollection&lt;Email&gt; _emails = new ObservableCollection&lt;Email&gt;();

        /// &lt;summary&gt;
        /// Gets an ICommand instance for changing the font face of a control.
        /// &lt;/summary&gt;
        public ICommand ChangeFontFaceCommand { get; private set; }

        /// &lt;summary&gt;
        /// Gets an ICommand instance for changing the font size of a control.
        /// &lt;/summary&gt;
        public ICommand ChangeFontSizeCommand { get; private set; }

        /// &lt;summary&gt;
        /// Initializes a new instance of the ContextMenuSample class.
        /// &lt;/summary&gt;
        public ContextMenuSample()
        {
            InitializeComponent();

            // Initialize variables
            EmailBody.DataContext = this;
            ChangeFontFaceCommand = new ChangeControlFontFaceCommand(EmailBody);
            ChangeFontSizeCommand = new ChangeControlFontSizeCommand(EmailBody);

            // Suppress Silverlight right-click menu for clicks on ListBoxItem elements
            EmailList.MouseRightButtonDown += delegate(object sender, MouseButtonEventArgs e)
            {
                e.Handled = true;
            };

            // Create sample emails
            for (int i = 1; i &lt; 16; i++)
            {
                _emails.Add(new Email { Subject = "Email Number " + i, Body = CreateRandomText(_rand.Next(20, 300)) });
            }
            EmailList.ItemsSource = _emails;

            // Select the top email
            EmailList.SelectedIndex = 0;
        }

        /// &lt;summary&gt;
        /// Handles clicks on the Delete context menu item.
        /// &lt;/summary&gt;
        /// &lt;param name="sender"&gt;Event source.&lt;/param&gt;
        /// &lt;param name="e"&gt;Event arguments.&lt;/param&gt;
        private void Delete_Click(object sender, RoutedEventArgs e)
        {
            Email email = ((MenuItem)sender).DataContext as Email;
            if (null != email)
            {
                _emails.Remove(email);
            }
        }

        /// &lt;summary&gt;
        /// Handles clicks on the Move Up context menu item.
        /// &lt;/summary&gt;
        /// &lt;param name="sender"&gt;Event source.&lt;/param&gt;
        /// &lt;param name="e"&gt;Event arguments.&lt;/param&gt;
        private void MoveUp_Click(object sender, RoutedEventArgs e)
        {
            Email email = ((MenuItem)sender).DataContext as Email;
            if (null != email)
            {
                int index = _emails.IndexOf(email);
                if (0 &lt;= index - 1)
                {
                    // .Move is simpler, but is not available on Silverlight
                    // _emails.Move(index, index - 1);
                    bool wasSelected = EmailList.SelectedItem == email;
                    _emails.RemoveAt(index);
                    _emails.Insert(index - 1, email);
                    if (wasSelected)
                    {
                        EmailList.SelectedItem = email;
                    }
                }
            }
        }

        /// &lt;summary&gt;
        /// Handles clicks on the Move Down context menu item.
        /// &lt;/summary&gt;
        /// &lt;param name="sender"&gt;Event source.&lt;/param&gt;
        /// &lt;param name="e"&gt;Event arguments.&lt;/param&gt;
        private void MoveDown_Click(object sender, RoutedEventArgs e)
        {
            Email email = ((MenuItem)sender).DataContext as Email;
            if (null != email)
            {
                int index = _emails.IndexOf(email);
                if (index + 1 &lt; _emails.Count)
                {
                    // .Move is simpler, but is not available on Silverlight
                    // _emails.Move(index, index + 1);
                    bool wasSelected = EmailList.SelectedItem == email;
                    _emails.RemoveAt(index);
                    _emails.Insert(index + 1, email);
                    if (wasSelected)
                    {
                        EmailList.SelectedItem = email;
                    }
                }
            }
        }

        /// &lt;summary&gt;
        /// Creates an arbitrary amount of random text in paragraph form.
        /// &lt;/summary&gt;
        /// &lt;param name="words"&gt;Number of words to create.&lt;/param&gt;
        /// &lt;returns&gt;String of random text.&lt;/returns&gt;
        private string CreateRandomText(int words)
        {
            StringBuilder sb = new StringBuilder();
            for (int i = 0; i &lt; words; i++)
            {
                sb.Append(_rand.NextDouble() &lt; 0.05 ? "\n\n" : " ");
                sb.Append("text");
            }
            return sb.ToString().TrimStart();
        }
    }
}
</sys:String>
    </src:SourceFile.Source>
  </src:SourceFile>
  <src:SourceFile Path="Email.cs">
    <src:SourceFile.Source>
      <sys:String xml:space="preserve">// (c) Copyright Microsoft Corporation.
// This source is subject to the Microsoft Public License (Ms-PL).
// Please see http://go.microsoft.com/fwlink/?LinkID=131993 for details.
// All other rights reserved.

namespace System.Windows.Controls.Samples
{
    /// &lt;summary&gt;
    /// Simple class representing an email message.
    /// &lt;/summary&gt;
    public class Email
    {
        /// &lt;summary&gt;
        /// Gets or sets the subject of the email.
        /// &lt;/summary&gt;
        public string Subject { get; set; }

        /// &lt;summary&gt;
        /// Gets or sets the body of the email.
        /// &lt;/summary&gt;
        public string Body { get; set; }
    }
}
</sys:String>
    </src:SourceFile.Source>
  </src:SourceFile>
  <src:SourceFile Path="ChangeControlFontFaceCommand.cs">
    <src:SourceFile.Source>
      <sys:String xml:space="preserve">// (c) Copyright Microsoft Corporation.
// This source is subject to the Microsoft Public License (Ms-PL).
// Please see http://go.microsoft.com/fwlink/?LinkID=131993 for details.
// All other rights reserved.

using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;
using System.Windows.Media;

namespace System.Windows.Controls.Samples
{
    /// &lt;summary&gt;
    /// ICommand implementation for changing the font face of a control.
    /// &lt;/summary&gt;
    public class ChangeControlFontFaceCommand : ICommand
    {
        /// &lt;summary&gt;
        /// References the target control.
        /// &lt;/summary&gt;
        private Control _control;

        /// &lt;summary&gt;
        /// Initializes a new instance of the ChangeControlFontFaceCommand class.
        /// &lt;/summary&gt;
        /// &lt;param name="control"&gt;Target control.&lt;/param&gt;
        public ChangeControlFontFaceCommand(Control control)
        {
            _control = control;
            EventHandler suppressUnusedEventWarning = CanExecuteChanged;
        }

        /// &lt;summary&gt;
        /// Returns a value indicating whether the command can execute.
        /// &lt;/summary&gt;
        /// &lt;param name="parameter"&gt;Command parameter.&lt;/param&gt;
        /// &lt;returns&gt;True if the command can execute.&lt;/returns&gt;
        public bool CanExecute(object parameter)
        {
            return true;
        }

        /// &lt;summary&gt;
        /// Executes the command to change the font family.
        /// &lt;/summary&gt;
        /// &lt;param name="parameter"&gt;Command parameter.&lt;/param&gt;
        public void Execute(object parameter)
        {
            _control.FontFamily = new FontFamily((string)parameter);
        }

        /// &lt;summary&gt;
        /// Event that is fired when the CanExecute state has changed.
        /// &lt;/summary&gt;
        public event EventHandler CanExecuteChanged;
    }
}
</sys:String>
    </src:SourceFile.Source>
  </src:SourceFile>
  <src:SourceFile Path="ChangeControlFontSizeCommand.cs">
    <src:SourceFile.Source>
      <sys:String xml:space="preserve">// (c) Copyright Microsoft Corporation.
// This source is subject to the Microsoft Public License (Ms-PL).
// Please see http://go.microsoft.com/fwlink/?LinkID=131993 for details.
// All other rights reserved.

using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;

namespace System.Windows.Controls.Samples
{
    /// &lt;summary&gt;
    /// ICommand implementation for changing the font size of a control.
    /// &lt;/summary&gt;
    public class ChangeControlFontSizeCommand : ICommand
    {
        /// &lt;summary&gt;
        /// Minimum valid font size.
        /// &lt;/summary&gt;
        private const int MinimumFontSize = 12;

        /// &lt;summary&gt;
        /// Maximum valid font size.
        /// &lt;/summary&gt;
        private const int MaximumFontSize = 16;

        /// &lt;summary&gt;
        /// References the target control.
        /// &lt;/summary&gt;
        private Control _control;

        /// &lt;summary&gt;
        /// Initializes a new instance of the ChangeControlFontSizeCommand class.
        /// &lt;/summary&gt;
        /// &lt;param name="control"&gt;Target control.&lt;/param&gt;
        public ChangeControlFontSizeCommand(Control control)
        {
            _control = control;
        }

        /// &lt;summary&gt;
        /// Returns a value indicating whether the command can execute.
        /// &lt;/summary&gt;
        /// &lt;param name="parameter"&gt;Command parameter.&lt;/param&gt;
        /// &lt;returns&gt;True if the command can execute.&lt;/returns&gt;
        public bool CanExecute(object parameter)
        {
            int deltaFontSize = (int)parameter;
            double newFontSize = _control.FontSize + deltaFontSize;
            return (MinimumFontSize &lt;= newFontSize) &amp;&amp; (newFontSize &lt;= MaximumFontSize);
        }

        /// &lt;summary&gt;
        /// Executes the command to change the font size.
        /// &lt;/summary&gt;
        /// &lt;param name="parameter"&gt;Command parameter.&lt;/param&gt;
        public void Execute(object parameter)
        {
            int deltaFontSize = (int)parameter;
            _control.FontSize += deltaFontSize;
            EventHandler handler = CanExecuteChanged;
            if (null != handler)
            {
                handler.Invoke(this, EventArgs.Empty);
            }
        }

        /// &lt;summary&gt;
        /// Event that is fired when the CanExecute state has changed.
        /// &lt;/summary&gt;
        public event EventHandler CanExecuteChanged;
    }
}
</sys:String>
    </src:SourceFile.Source>
  </src:SourceFile>
</src:SourceViewer>
    </StackPanel>
</UserControl>