<!--
// (c) Copyright Microsoft Corporation.
// This source is subject to the Microsoft Public License (Ms-PL).
// Please see http://go.microsoft.com/fwlink/?LinkID=131993 for details.
// All other rights reserved.
-->

<UserControl
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:layoutToolkit="clr-namespace:System.Windows.Controls;assembly=System.Windows.Controls.Layout.Toolkit"
    x:Class="System.Windows.Controls.Samples.LayoutTransformerSample">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition/>
        </Grid.RowDefinitions>

        <!-- Title -->
        <ContentControl Content="Interactive Sample" Style="{StaticResource Header}" />

        <!-- Sample -->
        <Grid Grid.Row="1">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition/>
            </Grid.RowDefinitions>

            <!-- Wrapper Grid with lines to show element bounds -->
            <Grid Grid.Row="2" ShowGridLines="True">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition/>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition/>
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition/>
                </Grid.RowDefinitions>
                <layoutToolkit:LayoutTransformer x:Name="layoutTransform" Grid.Column="1" Grid.Row="1">
                    <layoutToolkit:LayoutTransformer.LayoutTransform>
                        <TransformGroup>
                            <ScaleTransform x:Name="scaleTransform"/>
                            <SkewTransform x:Name="skewTransform"/>
                            <RotateTransform x:Name="rotateTransform"/>
                        </TransformGroup>
                    </layoutToolkit:LayoutTransformer.LayoutTransform>
                </layoutToolkit:LayoutTransformer>
            </Grid>

            <!-- Interactive UI elements -->
            <Grid Grid.Row="0">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition/>
                    <ColumnDefinition Width="55"/>
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition/>
                    <RowDefinition/>
                    <RowDefinition/>
                    <RowDefinition/>
                    <RowDefinition/>
                </Grid.RowDefinitions>
                <TextBlock Grid.Column="0" Grid.Row="0" Text="Scale X: " HorizontalAlignment="Right"/>
                <Slider Grid.Column="1" Grid.Row="0" Minimum="0" Maximum="5" Value="1" SmallChange="0.1" LargeChange="0.5" ValueChanged="Slider_ValueChanged" x:Name="scaleXSlider"/>
                <TextBlock Grid.Column="2" Grid.Row="0" x:Name="scaleXDisplay"/>
                <TextBlock Grid.Column="0" Grid.Row="1" Text="Scale Y: " HorizontalAlignment="Right"/>
                <Slider Grid.Column="1" Grid.Row="1" Minimum="0" Maximum="5" Value="1" SmallChange="0.1" LargeChange="0.5" ValueChanged="Slider_ValueChanged" x:Name="scaleYSlider"/>
                <TextBlock Grid.Column="2" Grid.Row="1" x:Name="scaleYDisplay"/>
                <TextBlock Grid.Column="0" Grid.Row="2" Text="Skew X: " HorizontalAlignment="Right"/>
                <Slider Grid.Column="1" Grid.Row="2" Minimum="-100" Maximum="100" SmallChange="1" LargeChange="10" ValueChanged="Slider_ValueChanged" x:Name="skewXSlider"/>
                <TextBlock Grid.Column="2" Grid.Row="2" x:Name="skewXDisplay"/>
                <TextBlock Grid.Column="0" Grid.Row="3" Text="Skew Y: " HorizontalAlignment="Right"/>
                <Slider Grid.Column="1" Grid.Row="3" Minimum="-100" Maximum="100" SmallChange="1" LargeChange="10" ValueChanged="Slider_ValueChanged" x:Name="skewYSlider"/>
                <TextBlock Grid.Column="2" Grid.Row="3" x:Name="skewYDisplay"/>
                <TextBlock Grid.Column="0" Grid.Row="4" Text="Rotation: " HorizontalAlignment="Right"/>
                <Slider Grid.Column="1" Grid.Row="4" Minimum="0" Maximum="360" SmallChange="1" LargeChange="15" ValueChanged="Slider_ValueChanged" x:Name="rotateSlider"/>
                <TextBlock Grid.Column="2" Grid.Row="4" x:Name="rotateDisplay"/>
            </Grid>
            <Grid Grid.Row="1">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition/>
                    <ColumnDefinition/>
                    <ColumnDefinition/>
                    <ColumnDefinition/>
                    <ColumnDefinition/>
                </Grid.ColumnDefinitions>
                <Button Grid.Column="0" Content="Empty" Click="Empty_Click"/>
                <Button Grid.Column="1" Content="Text" Click="Text_Click"/>
                <Button Grid.Column="2" Content="Button" Click="Button_Click"/>
                <Button Grid.Column="3" Content="Image" Click="Image_Click"/>
                <Button Grid.Column="4" Content="ListBox" Click="ListBox_Click"/>
            </Grid>
        </Grid>

        <!-- Source Viewer -->
        <src:SourceViewer xmlns:src="clr-namespace:System.Windows.Controls.Samples;assembly=System.Windows.Controls.Samples.Common" xmlns:sys="clr-namespace:System;assembly=mscorlib">
  <src:SourceFile Path="LayoutTransformerSample.xaml">
    <src:SourceFile.Source>
      <sys:String xml:space="preserve">&lt;!--
// (c) Copyright Microsoft Corporation.
// This source is subject to the Microsoft Public License (Ms-PL).
// Please see http://go.microsoft.com/fwlink/?LinkID=131993 for details.
// All other rights reserved.
--&gt;

&lt;UserControl
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:layoutToolkit="clr-namespace:System.Windows.Controls;assembly=System.Windows.Controls.Layout.Toolkit"
    x:Class="System.Windows.Controls.Samples.LayoutTransformerSample"&gt;
    &lt;Grid&gt;
        &lt;Grid.RowDefinitions&gt;
            &lt;RowDefinition Height="Auto"/&gt;
            &lt;RowDefinition/&gt;
        &lt;/Grid.RowDefinitions&gt;

        &lt;!-- Title --&gt;
        &lt;ContentControl Content="Interactive Sample" Style="{StaticResource Header}" /&gt;

        &lt;!-- Sample --&gt;
        &lt;Grid Grid.Row="1"&gt;
            &lt;Grid.RowDefinitions&gt;
                &lt;RowDefinition Height="Auto"/&gt;
                &lt;RowDefinition Height="Auto"/&gt;
                &lt;RowDefinition/&gt;
            &lt;/Grid.RowDefinitions&gt;

            &lt;!-- Wrapper Grid with lines to show element bounds --&gt;
            &lt;Grid Grid.Row="2" ShowGridLines="True"&gt;
                &lt;Grid.ColumnDefinitions&gt;
                    &lt;ColumnDefinition/&gt;
                    &lt;ColumnDefinition Width="Auto"/&gt;
                    &lt;ColumnDefinition/&gt;
                &lt;/Grid.ColumnDefinitions&gt;
                &lt;Grid.RowDefinitions&gt;
                    &lt;RowDefinition/&gt;
                    &lt;RowDefinition Height="Auto"/&gt;
                    &lt;RowDefinition/&gt;
                &lt;/Grid.RowDefinitions&gt;
                &lt;layoutToolkit:LayoutTransformer x:Name="layoutTransform" Grid.Column="1" Grid.Row="1"&gt;
                    &lt;layoutToolkit:LayoutTransformer.LayoutTransform&gt;
                        &lt;TransformGroup&gt;
                            &lt;ScaleTransform x:Name="scaleTransform"/&gt;
                            &lt;SkewTransform x:Name="skewTransform"/&gt;
                            &lt;RotateTransform x:Name="rotateTransform"/&gt;
                        &lt;/TransformGroup&gt;
                    &lt;/layoutToolkit:LayoutTransformer.LayoutTransform&gt;
                &lt;/layoutToolkit:LayoutTransformer&gt;
            &lt;/Grid&gt;

            &lt;!-- Interactive UI elements --&gt;
            &lt;Grid Grid.Row="0"&gt;
                &lt;Grid.ColumnDefinitions&gt;
                    &lt;ColumnDefinition Width="Auto"/&gt;
                    &lt;ColumnDefinition/&gt;
                    &lt;ColumnDefinition Width="55"/&gt;
                &lt;/Grid.ColumnDefinitions&gt;
                &lt;Grid.RowDefinitions&gt;
                    &lt;RowDefinition/&gt;
                    &lt;RowDefinition/&gt;
                    &lt;RowDefinition/&gt;
                    &lt;RowDefinition/&gt;
                    &lt;RowDefinition/&gt;
                &lt;/Grid.RowDefinitions&gt;
                &lt;TextBlock Grid.Column="0" Grid.Row="0" Text="Scale X: " HorizontalAlignment="Right"/&gt;
                &lt;Slider Grid.Column="1" Grid.Row="0" Minimum="0" Maximum="5" Value="1" SmallChange="0.1" LargeChange="0.5" ValueChanged="Slider_ValueChanged" x:Name="scaleXSlider"/&gt;
                &lt;TextBlock Grid.Column="2" Grid.Row="0" x:Name="scaleXDisplay"/&gt;
                &lt;TextBlock Grid.Column="0" Grid.Row="1" Text="Scale Y: " HorizontalAlignment="Right"/&gt;
                &lt;Slider Grid.Column="1" Grid.Row="1" Minimum="0" Maximum="5" Value="1" SmallChange="0.1" LargeChange="0.5" ValueChanged="Slider_ValueChanged" x:Name="scaleYSlider"/&gt;
                &lt;TextBlock Grid.Column="2" Grid.Row="1" x:Name="scaleYDisplay"/&gt;
                &lt;TextBlock Grid.Column="0" Grid.Row="2" Text="Skew X: " HorizontalAlignment="Right"/&gt;
                &lt;Slider Grid.Column="1" Grid.Row="2" Minimum="-100" Maximum="100" SmallChange="1" LargeChange="10" ValueChanged="Slider_ValueChanged" x:Name="skewXSlider"/&gt;
                &lt;TextBlock Grid.Column="2" Grid.Row="2" x:Name="skewXDisplay"/&gt;
                &lt;TextBlock Grid.Column="0" Grid.Row="3" Text="Skew Y: " HorizontalAlignment="Right"/&gt;
                &lt;Slider Grid.Column="1" Grid.Row="3" Minimum="-100" Maximum="100" SmallChange="1" LargeChange="10" ValueChanged="Slider_ValueChanged" x:Name="skewYSlider"/&gt;
                &lt;TextBlock Grid.Column="2" Grid.Row="3" x:Name="skewYDisplay"/&gt;
                &lt;TextBlock Grid.Column="0" Grid.Row="4" Text="Rotation: " HorizontalAlignment="Right"/&gt;
                &lt;Slider Grid.Column="1" Grid.Row="4" Minimum="0" Maximum="360" SmallChange="1" LargeChange="15" ValueChanged="Slider_ValueChanged" x:Name="rotateSlider"/&gt;
                &lt;TextBlock Grid.Column="2" Grid.Row="4" x:Name="rotateDisplay"/&gt;
            &lt;/Grid&gt;
            &lt;Grid Grid.Row="1"&gt;
                &lt;Grid.ColumnDefinitions&gt;
                    &lt;ColumnDefinition/&gt;
                    &lt;ColumnDefinition/&gt;
                    &lt;ColumnDefinition/&gt;
                    &lt;ColumnDefinition/&gt;
                    &lt;ColumnDefinition/&gt;
                &lt;/Grid.ColumnDefinitions&gt;
                &lt;Button Grid.Column="0" Content="Empty" Click="Empty_Click"/&gt;
                &lt;Button Grid.Column="1" Content="Text" Click="Text_Click"/&gt;
                &lt;Button Grid.Column="2" Content="Button" Click="Button_Click"/&gt;
                &lt;Button Grid.Column="3" Content="Image" Click="Image_Click"/&gt;
                &lt;Button Grid.Column="4" Content="ListBox" Click="ListBox_Click"/&gt;
            &lt;/Grid&gt;
        &lt;/Grid&gt;

        &lt;!-- Source Viewer --&gt;
    &lt;/Grid&gt;
&lt;/UserControl&gt;</sys:String>
    </src:SourceFile.Source>
  </src:SourceFile>
  <src:SourceFile Path="LayoutTransformerSample.xaml.cs">
    <src:SourceFile.Source>
      <sys:String xml:space="preserve">// (c) Copyright Microsoft Corporation.
// This source is subject to the Microsoft Public License (Ms-PL).
// Please see http://go.microsoft.com/fwlink/?LinkID=131993 for details.
// All other rights reserved.

using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.IO;
using System.Windows.Media.Imaging;

namespace System.Windows.Controls.Samples
{
    /// &lt;summary&gt;
    /// Sample page demonstrating LayoutTransformer.
    /// &lt;/summary&gt;
    [Sample("Interactive Sample", DifficultyLevel.Basic, "LayoutTransformer")]
    public partial class LayoutTransformerSample : UserControl
    {
        /// &lt;summary&gt;
        /// Specifies the size of large fonts.
        /// &lt;/summary&gt;
        private const int SampleFontSizeLarge = 64;

        /// &lt;summary&gt;
        /// Specifies the size of small fonts.
        /// &lt;/summary&gt;
        private const int SampleFontSizeSmall = 28;

        /// &lt;summary&gt;
        /// Indicates whether component initialization has finished.
        /// &lt;/summary&gt;
        private bool _initializeComponentFinished;

        /// &lt;summary&gt;
        /// Initializes a new instance of the LayoutTransformerSample class.
        /// &lt;/summary&gt;
        public LayoutTransformerSample()
        {
            InitializeComponent();
            _initializeComponentFinished = true;
            Slider_ValueChanged(null, null);
            Text_Click(null, null);
            Loaded += delegate
            {
                // Sample browser-specific layout change.
                SampleHelpers.ChangeSampleAlignmentToStretch(this);
            };
        }

        /// &lt;summary&gt;
        /// Handles the ValueChanged event for any Slider.
        /// &lt;/summary&gt;
        /// &lt;param name="sender"&gt;Source of event.&lt;/param&gt;
        /// &lt;param name="e"&gt;Event arguments.&lt;/param&gt;
        private void Slider_ValueChanged(object sender, RoutedPropertyChangedEventArgs&lt;double&gt; e)
        {
            if (_initializeComponentFinished)
            {
                scaleTransform.ScaleX = scaleXSlider.Value;
                scaleXDisplay.Text = Math.Round(scaleXSlider.Value, 2).ToString(CultureInfo.CurrentCulture);
                scaleTransform.ScaleY = scaleYSlider.Value;
                scaleYDisplay.Text = Math.Round(scaleYSlider.Value, 2).ToString(CultureInfo.CurrentCulture);
                skewTransform.AngleX = skewXSlider.Value;
                skewXDisplay.Text = Math.Round(skewXSlider.Value, 2).ToString(CultureInfo.CurrentCulture);
                skewTransform.AngleY = skewYSlider.Value;
                skewYDisplay.Text = Math.Round(skewYSlider.Value, 2).ToString(CultureInfo.CurrentCulture);
                rotateTransform.Angle = rotateSlider.Value;
                rotateDisplay.Text = Math.Round(rotateSlider.Value, 2).ToString(CultureInfo.CurrentCulture);
                layoutTransform.ApplyLayoutTransform();
            }
        }

        /// &lt;summary&gt;
        /// Handles the Click event for the Empty Button.
        /// &lt;/summary&gt;
        /// &lt;param name="sender"&gt;Source of event.&lt;/param&gt;
        /// &lt;param name="e"&gt;Event arguments.&lt;/param&gt;
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Justification = "Referenced in XAML.")]
        private void Empty_Click(object sender, RoutedEventArgs e)
        {
            layoutTransform.Content = null;
        }

        /// &lt;summary&gt;
        /// Handles the Click event for the Text Button.
        /// &lt;/summary&gt;
        /// &lt;param name="sender"&gt;Source of event.&lt;/param&gt;
        /// &lt;param name="e"&gt;Event arguments.&lt;/param&gt;
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Justification = "Referenced in XAML.")]
        private void Text_Click(object sender, RoutedEventArgs e)
        {
            layoutTransform.Content = new TextBlock { Text = "TextBlock", FontSize = SampleFontSizeLarge };
        }

        /// &lt;summary&gt;
        /// Handles the Click event for the Button Button.
        /// &lt;/summary&gt;
        /// &lt;param name="sender"&gt;Source of event.&lt;/param&gt;
        /// &lt;param name="e"&gt;Event arguments.&lt;/param&gt;
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Justification = "Referenced in XAML.")]
        private void Button_Click(object sender, RoutedEventArgs e)
        {
            layoutTransform.Content = new Button { Content = "Button", FontSize = SampleFontSizeLarge };
        }

        /// &lt;summary&gt;
        /// Handles the Click event for the Image Button.
        /// &lt;/summary&gt;
        /// &lt;param name="sender"&gt;Source of event.&lt;/param&gt;
        /// &lt;param name="e"&gt;Event arguments.&lt;/param&gt;
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Justification = "Referenced in XAML.")]
        private void Image_Click(object sender, RoutedEventArgs e)
        {
            BitmapImage bitmapImage = new BitmapImage();
            using (Stream resourceStream = typeof(SharedResources).Assembly.GetManifestResourceStream("System.Windows.Controls.Samples.Images.Dock.jpg"))
            {
                if (resourceStream != null)
                {
                    bitmapImage.SetSource(resourceStream);
                }
            }
            layoutTransform.Content = new Image { Source = bitmapImage };
        }

        /// &lt;summary&gt;
        /// Handles the Click event for the Empty Button.
        /// &lt;/summary&gt;
        /// &lt;param name="sender"&gt;Source of event.&lt;/param&gt;
        /// &lt;param name="e"&gt;Event arguments.&lt;/param&gt;
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Justification = "Referenced in XAML.")]
        private void ListBox_Click(object sender, RoutedEventArgs e)
        {
            var listBox = new ListBox();
            foreach (var item in "This-is a-fully-functional-ListBox!".Split('-'))
            {
                listBox.Items.Add(new ListBoxItem { Content = item, FontSize = SampleFontSizeSmall });
            }
            layoutTransform.Content = listBox;
        }
    }
}</sys:String>
    </src:SourceFile.Source>
  </src:SourceFile>
  <src:SourceFile Path="LayoutTransformerSample.xaml.vb">
    <src:SourceFile.Source>
      <sys:String xml:space="preserve">' (c) Copyright Microsoft Corporation.
' This source is subject to the Microsoft Public License (Ms-PL).
' Please see http://go.microsoft.com/fwlink/?LinkID=131993 for details.
' All other rights reserved.

Imports Microsoft.VisualBasic
Imports System
Imports System.Globalization
Imports System.IO
Imports System.ComponentModel
Imports System.Diagnostics.CodeAnalysis
Imports System.Windows.Media.Imaging

''' &lt;summary&gt;
''' Sample page demonstrating LayoutTransformer.
''' &lt;/summary&gt;
&lt;Sample("Interactive Sample", DifficultyLevel.Basic), Category("LayoutTransformer")&gt; _
Partial Public Class LayoutTransformerSample
	Inherits UserControl
	''' &lt;summary&gt;
	''' Specifies the size of large fonts.
	''' &lt;/summary&gt;
	Private Const SampleFontSizeLarge As Integer = 64

	''' &lt;summary&gt;
	''' Specifies the size of small fonts.
	''' &lt;/summary&gt;
	Private Const SampleFontSizeSmall As Integer = 28

	''' &lt;summary&gt;
	''' Indicates whether component initialization has finished.
	''' &lt;/summary&gt;
	Private _initializeComponentFinished As Boolean

	''' &lt;summary&gt;
	''' Initializes a new instance of the LayoutTransformerSample class.
	''' &lt;/summary&gt;
	Public Sub New()
		InitializeComponent()
		_initializeComponentFinished = True
		Slider_ValueChanged(Nothing, Nothing)
		Text_Click(Nothing, Nothing)
        AddHandler Loaded, AddressOf LayoutTransformerSample_Loaded
	End Sub

    Private Sub LayoutTransformerSample_Loaded(ByVal sender As Object, ByVal args As RoutedEventArgs)
        SampleHelpers.ChangeSampleAlignmentToStretch(Me)
    End Sub

	''' &lt;summary&gt;
	''' Handles the ValueChanged event for any Slider.
	''' &lt;/summary&gt;
	''' &lt;param name="sender"&gt;Source of event.&lt;/param&gt;
	''' &lt;param name="e"&gt;Event arguments.&lt;/param&gt;
	Private Sub Slider_ValueChanged(ByVal sender As Object, ByVal e As RoutedPropertyChangedEventArgs(Of Double))
		If _initializeComponentFinished Then
			scaleTransform.ScaleX = scaleXSlider.Value
			scaleXDisplay.Text = Math.Round(scaleXSlider.Value, 2).ToString(CultureInfo.CurrentCulture)
			scaleTransform.ScaleY = scaleYSlider.Value
			scaleYDisplay.Text = Math.Round(scaleYSlider.Value, 2).ToString(CultureInfo.CurrentCulture)
			skewTransform.AngleX = skewXSlider.Value
			skewXDisplay.Text = Math.Round(skewXSlider.Value, 2).ToString(CultureInfo.CurrentCulture)
			skewTransform.AngleY = skewYSlider.Value
			skewYDisplay.Text = Math.Round(skewYSlider.Value, 2).ToString(CultureInfo.CurrentCulture)
			rotateTransform.Angle = rotateSlider.Value
			rotateDisplay.Text = Math.Round(rotateSlider.Value, 2).ToString(CultureInfo.CurrentCulture)
			layoutTransform.ApplyLayoutTransform()
		End If
	End Sub

	''' &lt;summary&gt;
	''' Handles the Click event for the Empty Button.
	''' &lt;/summary&gt;
	''' &lt;param name="sender"&gt;Source of event.&lt;/param&gt;
	''' &lt;param name="e"&gt;Event arguments.&lt;/param&gt;
	&lt;SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Justification := "Referenced in XAML.")&gt; _
	Private Sub Empty_Click(ByVal sender As Object, ByVal e As RoutedEventArgs)
		layoutTransform.Content = Nothing
	End Sub

	''' &lt;summary&gt;
	''' Handles the Click event for the Text Button.
	''' &lt;/summary&gt;
	''' &lt;param name="sender"&gt;Source of event.&lt;/param&gt;
	''' &lt;param name="e"&gt;Event arguments.&lt;/param&gt;
	&lt;SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Justification := "Referenced in XAML.")&gt; _
	Private Sub Text_Click(ByVal sender As Object, ByVal e As RoutedEventArgs)
		layoutTransform.Content = New TextBlock With {.Text = "TextBlock", .FontSize = SampleFontSizeLarge}
	End Sub

	''' &lt;summary&gt;
	''' Handles the Click event for the Button Button.
	''' &lt;/summary&gt;
	''' &lt;param name="sender"&gt;Source of event.&lt;/param&gt;
	''' &lt;param name="e"&gt;Event arguments.&lt;/param&gt;
	&lt;SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Justification := "Referenced in XAML.")&gt; _
	Private Sub Button_Click(ByVal sender As Object, ByVal e As RoutedEventArgs)
		layoutTransform.Content = New Button With {.Content = "Button", .FontSize = SampleFontSizeLarge}
	End Sub

	''' &lt;summary&gt;
	''' Handles the Click event for the Image Button.
	''' &lt;/summary&gt;
	''' &lt;param name="sender"&gt;Source of event.&lt;/param&gt;
	''' &lt;param name="e"&gt;Event arguments.&lt;/param&gt;
	&lt;SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Justification := "Referenced in XAML.")&gt; _
	Private Sub Image_Click(ByVal sender As Object, ByVal e As RoutedEventArgs)
		Dim bitmapImage As New BitmapImage()
		Using resourceStream As Stream = GetType(SharedResources).Assembly.GetManifestResourceStream("System.Windows.Controls.Samples.Images.Dock.jpg")
			If resourceStream IsNot Nothing Then
				bitmapImage.SetSource(resourceStream)
			End If
		End Using
        layoutTransform.Content = New Image With {.Source = bitmapImage}
	End Sub

	''' &lt;summary&gt;
	''' Handles the Click event for the Empty Button.
	''' &lt;/summary&gt;
	''' &lt;param name="sender"&gt;Source of event.&lt;/param&gt;
	''' &lt;param name="e"&gt;Event arguments.&lt;/param&gt;
	&lt;SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Justification := "Referenced in XAML.")&gt; _
	Private Sub ListBox_Click(ByVal sender As Object, ByVal e As RoutedEventArgs)
		Dim listBox = New ListBox()
		For Each item In "This-is a-fully-functional-ListBox!".Split("-"c)
			listBox.Items.Add(New ListBoxItem With {.Content = item, .FontSize = SampleFontSizeSmall})
		Next item
		layoutTransform.Content = listBox
	End Sub
End Class</sys:String>
    </src:SourceFile.Source>
  </src:SourceFile>
</src:SourceViewer>
    </Grid>
</UserControl>